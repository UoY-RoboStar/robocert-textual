/*
 * generated by Xtext 2.25.0
 */
package robocalc.robocert;

import circus.robocalc.robochart.textual.scoping.RoboChartImportURIGlobalScopeProvider;
import circus.robocalc.robochart.textual.scoping.RoboChartImportedNamespaceAwareLocalScopeProvider;
import com.google.inject.Binder;
import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import robocalc.robocert.generator.RoboCertOutputConfigurationProvider;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import circus.robocalc.robochart.textual.RoboChartQualifiedNameConverter;
import circus.robocalc.robochart.impl.RoboChartFactoryImplCustom;
import circus.robocalc.robochart.RoboChartFactory;
import robocalc.robocert.generator.intf.seq.ContextualGenerator;
import robocalc.robocert.generator.intf.seq.fragment.BlockFragmentGenerator;
import robocalc.robocert.generator.tockcsp.seq.InteractionOperandGenerator;
import robocalc.robocert.generator.tockcsp.seq.fragment.BlockFragmentGeneratorImpl;
import robocalc.robocert.model.robocert.InteractionOperand;
import robocalc.robocert.model.robocert.RoboCertFactory;
import robocalc.robocert.generator.intf.seq.OccurrenceGenerator;
import robocalc.robocert.generator.tockcsp.seq.occurrence.OccurrenceGeneratorImpl;
import robocalc.robocert.generator.intf.seq.SubsequenceGenerator;
import robocalc.robocert.generator.intf.seq.InteractionFragmentGenerator;

import org.eclipse.xtext.conversion.IValueConverterService;
import robocalc.robocert.generator.tockcsp.seq.SubsequenceGeneratorImpl;
import robocalc.robocert.generator.tockcsp.seq.fragment.InteractionFragmentGeneratorImpl;
import robocalc.robocert.model.robocert.impl.RoboCertFactoryImpl;
import robocalc.robocert.model.robocert.util.resolve.EventResolver;
import robocalc.robocert.model.robocert.util.resolve.EventResolverImpl;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension
 * registry.
 */
@SuppressWarnings("unused")
public class RoboCertRuntimeModule extends AbstractRoboCertRuntimeModule {

  public Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
    return RoboCertOutputConfigurationProvider.class;
  }

  public Class<? extends OccurrenceGenerator> bindOccurrenceGenerator() {
    return OccurrenceGeneratorImpl.class;
  }

  public Class<? extends SubsequenceGenerator> bindSubsequenceGenerator() {
    return SubsequenceGeneratorImpl.class;
  }

  public Class<? extends InteractionFragmentGenerator> bindInteractionFragmentGenerator() {
    return InteractionFragmentGeneratorImpl.class;
  }

  public Class<? extends ContextualGenerator<InteractionOperand>> bindInteractionOperandGenerator() {
    return InteractionOperandGenerator.class;
  }

  public Class<? extends EventResolver> bindEventResolver() {
    return EventResolverImpl.class;
  }

  public Class<? extends BlockFragmentGenerator> bindBlockFragmentGenerator() {
    return BlockFragmentGeneratorImpl.class;
  }

  /**
   * Binds the RoboChart name converter (so that qualified names are '::'-delimited).
   */
  public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
    return RoboChartQualifiedNameConverter.class;
  }

  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return RoboCertValueConverterService.class;
  }

  //
  // These next two serve to put the core RoboChart toolkits into the global scope.
  //

  @Override
  public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    return RoboChartImportURIGlobalScopeProvider.class;
  }

  @Override
  public void configureIScopeProviderDelegate(Binder binder) {
    binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class).annotatedWith(
            com.google.inject.name.Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
        .to(RoboChartImportedNamespaceAwareLocalScopeProvider.class);
  }

  /**
   * Binds the RoboCert factory.
   */
  public Class<? extends RoboCertFactory> bindRoboCertFactory() {
    // TODO(@MattWindsor91): is this the right way to do this?
    return RoboCertFactoryImpl.class;
  }

  /**
   * Binds the RoboChart custom factory.
   */
  public Class<? extends RoboChartFactory> bindRoboChartFactory() {
    return RoboChartFactoryImplCustom.class;
  }
}
