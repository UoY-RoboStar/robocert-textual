// automatically generated by Xtext
grammar robocalc.robocert.RoboCert with circus.robocalc.robochart.textual.RoboChart

import "http://robocert.robocalc/" 
import "http://www.robocalc.circus/RoboChart"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

///////////////////////////////////////////////////////////////////////////////
// Core language
///////////////////////////////////////////////////////////////////////////////

/**
 * A top-level assertions package.
 */
RAPackage:
	( groups += (CSPGroup | SequenceGroup)
	| assertions += Assertion
	)*;

/**
 * A RoboCert assertion.
 */
Assertion:
	'assertion' name=ID ':'
	property=
		( CSPRefinementProperty
		| SequenceProperty
		)
;

/**
 * A RoboCert CSP refinement property.
 */
CSPRefinementProperty:
	lhs=[CSPProcessSource|QualifiedName]
	( 'does' isNegated?='not' type=DoesNotCSPRefinementOperator
    | type=DoesCSPRefinementOperator
    )
	rhs=[CSPProcessSource|QualifiedName]
    InCSPModelSpec?
;

/**
 * Sequence property types that agree with 'does not'.
 */
enum DoesNotCSPRefinementOperator returns CSPRefinementOperator:
	REFINES='refine'
	| EQUALS='equal'
;

/**
 * Sequence property that agree without a prefix (eg, the opposite of
 * 'does not' sequence property types).
 */
enum DoesCSPRefinementOperator returns CSPRefinementOperator:
	REFINES='refines'
	| EQUALS='equals'
;

	
/**
 * A CSP group.
 */
CSPGroup:
	{CSPGroup} (isUntimed?='untimed'? & isPreamble?='preamble'?) 'csp' instantiation=Instantiation '{' fragments+=CSPFragment* '}'
;

/**
 * A CSP fragment.
 * 
 * CSP fragments can be event-set-bound, process-bound, or inline.
 */
CSPFragment:
	( 'event' 'set' {EventSetCSPFragment} name=ID
	| 'process' {ProcessCSPFragment} name=ID (':' 'events' 'in' events=[CSPContextSource|QualifiedName])?
	| 'inline' {InlineCSPFragment} name=ID?
	)
	contents=CSP_CODE
;

/**
 * The raw CSP code.
 */
terminal CSP_CODE: 'csp-begin' -> 'csp-end';


/**
 * Explicitly specifying the CSP model of a property.
 * 
 * TODO(@MattWindsor91): there may need to be more abstract ways of specifying
 * these models eventually.
 */
fragment InCSPModelSpec *:
	'in' 'the' model=CSPModel 'model'
;

/**
 * Names of CSP models.
 */
enum CSPModel:
	TRACES='traces' |
	TICK_TOCK='tick-tock'
;

///////////////////////////////////////////////////////////////////////////////
// Expression language
//
// Ideally this shouldn't stray too far from the RoboChart language (and maybe
// one day it'll merge back into it).
///////////////////////////////////////////////////////////////////////////////

RAExpr:
	{RAIntLit} value=INT |
	{RAConstExpr} constant=[Variable|QualifiedName]
;


///////////////////////////////////////////////////////////////////////////////
// Sequence diagrams
///////////////////////////////////////////////////////////////////////////////

/**
 * A sequence diagram group.
 * 
 * Sequence diagram groups contain a target and world, and then a mix of
 * sequences and message sets.
 */
SequenceGroup:
	'sequence' 'group' name=ID ':' target=Target '->' world=World
	instantiation=Instantiation
	'{'
	(sequences+=Sequence | messageSets += NamedMessageSet)*
	'}'
;

/**
 * A sequence diagram.
 */
Sequence:
	'sequence' name=ID body=Subsequence
;

/**
 * A subsequence.
 */
Subsequence:
	'{' (steps+=SequenceStep) ('then' steps+=SequenceStep)* '}'
;

/**
 * A target override in a sequence diagram.
 */
Instantiation:
	{Instantiation} ('with' '{' (assignments += ConstAssignment) (',' assignments += ConstAssignment)* '}')?
;

/**
 * Various synonyms for assignment.
 */
fragment AssignWords *:
	'set' 'to' | 'assigned'
;

/**
 * A constant assignment.
 */
ConstAssignment:
	ConstName ('and' ConstName)* AssignWords value=RAExpr
;

fragment ConstName *:
	constants+=[Variable|QualifiedName]
;

/**
 * A target of a sequence diagram.
 */
Target:
	 ('module' {RCModuleTarget} module=[RCModule|QualifiedName]) AsName
;

/**
 * The world actor of a sequence diagram.
 */
World:
	'world' {World}
;

// The basic trace is 'X then X then X... end'.  We can change to weak
// ordering by adding 'when' before X, or at the end by removing 'end'.
//
// As we improve the language, we'll want to capture property specification
// patterns (PSPs).
// The PSP scopes correspond to the following trace step sequences:
// 
// 'globally' => X
// 'after Q'  => anything until Q then X
// 'between Q and R' => ??
// 'after Q until R' => ??

/**
 * A step in a sequence diagram.
 */
SequenceStep:
	'within' {DeadlineStep} units=TimeUnits body=Subsequence |
	LoopStep |
	{ActionStep} gap=Gap action=SequenceAction
;

/**
 * An action in a sequence diagram.
 */
SequenceAction:
	{ArrowAction} body=MessageSpec |
	'after' {WaitAction} units=TimeUnits |
	'end' {FinalAction}
;

/**
 * A time unit expression.
 */
TimeUnits returns RAExpr:
	RAExpr 'time'? ('unit' | 'units')
;

/**
 * Fragment for tacking a name onto the end of an OptionallyNamedElement.
 */
fragment AsName *:
	('as' name=ID)?
;

/**
 * A loop.
 * 
 * Without a specification, loops will iterate forever.
 */
LoopStep:
	'loop' {LoopStep} 
	// Slightly complicated rule to ensure that, if the loop has an explicit
	// bound, ':' is optional if there is no name, but mandatory (for
	// disambiguation) if there is one.
	( bound=SilentInfiniteLoopBound // loop {
	| ':'? bound=LoopBound // loop exactly 4 times {
	| name=ID
		( bound=SilentInfiniteLoopBound // loop L {
		| ':' bound=LoopBound // loop L: exactly 4 times {
		)
	)
	body=Subsequence
;

/**
 * A loop bound.
 */
LoopBound:
	'forever' {InfiniteLoopBound} |
	'exactly' {DefiniteLoopBound} times=RAExpr 'times' |
	'at' 'least' {LowerLoopBound} lowerTimes=RAExpr 'times' |
	'between' {RangeLoopBound} lowerTimes=RAExpr 'and' upperTimes=RAExpr 'times'
;

/**
 * Used to default to an infinite loop bound if none is explicitly given.
 */
SilentInfiniteLoopBound returns LoopBound:
	{InfiniteLoopBound}
;

/**
 * A gap specification.
 */
Gap returns MessageSet:
	'anything' AllowSet 'until' | EmptySet
;

/**
 * The topmost level of a gap set specification, one of:
 * 
 * - 'in X';
 * - 'in X except Y';
 * - 'except Y';
 * - '' (universe implied).
 */
AllowSet returns MessageSet:
	'in' MessageSet |
	{UniverseMessageSet} ({BinaryMessageSet.lhs=current} operator=DiffOperator rhs=UnionOrInterSet)?
;

/**
 * The main top-level rule for message sets, after accounting for the
 * possible omission of 'in X' in an 'anything except Y' stanza.
 */
MessageSet:
	UnionOrInterSet ({BinaryMessageSet.lhs = current} (operator=DiffOperator) rhs=UnionOrInterSet)*
;

/**
 * Factored-out level for union or intersection sets.
 */
UnionOrInterSet returns MessageSet:
	PrimitiveSet ({BinaryMessageSet.lhs = current} (operator=UnionOrInterOperator) rhs=PrimitiveSet)*
;

/**
 * Union or intersection operator literals.
 */
enum UnionOrInterOperator returns BinarySetOperator:
	UNION='or' |
	INTERSECTION='and'
;

/**
 * Difference operator literal.
 */
enum DiffOperator returns BinarySetOperator:
	DIFFERENCE='except'
;

/**
 * Pseudo-rule that pulls a gap message set to empty if we don't see an
 * explicit rule.
 */
EmptySet returns ExtensionalMessageSet:
	{ExtensionalMessageSet}
;

/**
 * A primitive message set.
 */
PrimitiveSet returns MessageSet:
	'(' MessageSet ')' |
	'universe' {UniverseMessageSet} |
	ExtensionalMessageSet |
	'message'? 'set' {RefMessageSet} set=[NamedMessageSet]
;

/**
 * An extensional message set (including singleton message sets).
 */
ExtensionalMessageSet:
	'{|' {ExtensionalMessageSet} messages+=MessageSpec (',' messages+=MessageSpec)* '|}' |
	messages+=MessageSpec
;

/**
 * A named message set.
 */
NamedMessageSet:
	'message' 'set' name=ID ':' set=MessageSet
;

/**
 * A message specification.
 */
MessageSpec:
	 direction=MessageDirection topic=MessageTopic ('(' (arguments+=Argument (',' arguments+=Argument)*)? ')')?
;

/**
 * The direction of a message.
 */
enum MessageDirection:
	INBOUND='<-' |
	OUTBOUND='->'
;

/**
 * An argument pattern.
 */
Argument:
	{ExpressionArgument} expr=RAExpr |
	{RestArgument} '...'
;

/**
 * A message topic.
 */
MessageTopic:
	'event' {EventTopic} event=[Event|QualifiedName] |
	('op'|'operation') {OperationTopic} operation=[OperationSig|QualifiedName]
;

//
// Sequence properties
//

/**
 * A sequence property.
 *
 * These are:
 *
 * - SEQUENCE is observed (in CSP: sequence refines target)
 * - SEQUENCE is not observed (in CSP: sequence does not refine target)
 * - SEQUENCE holds (in CSP: target refines sequence)
 * - SEQUENCE does not hold (in CSP: target does not refine sequence)
 */
SequenceProperty:
	sequence=[Sequence|QualifiedName]
		( 'is' isNegated?='not' type=IsSequencePropertyType
        | 'does' isNegated?='not' type=DoesNotSequencePropertyType
        | type=DoesSequencePropertyType
        )
    InCSPModelSpec?
;

/**
 * Sequence property types that agree with 'is' and 'is not'.
 */
enum IsSequencePropertyType returns SequencePropertyType:
	IS_OBSERVED='observed'
;

/**
 * Sequence property types that agree with 'does not'.
 */
enum DoesNotSequencePropertyType returns SequencePropertyType:
	HOLDS='hold'
;

/**
 * Sequence property that agree without a prefix (eg, the opposite of
 * 'does not' sequence property types).
 */
enum DoesSequencePropertyType returns SequencePropertyType:
	HOLDS='holds'
;
