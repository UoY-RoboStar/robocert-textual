// automatically generated by Xtext
grammar robocalc.robocert.RoboCert with circus.robocalc.robochart.textual.RoboChart

import "http://robocert.robocalc/" 
import "http://www.robocalc.circus/RoboChart"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * A top-level diagram.
 */
Package:
	( cspFragments += CSPFragment
	| sequences += Sequence
	| assertions += Assertion
	)*;

/**
 * A raw CSP fragment.
 * 
 * TODO: per meta-model, these will likely go away later on, replaced with
 *       process-bound CSP fragments only.
 */

CSPFragment:
	'include' contents = CSP_CODE;

terminal CSP_CODE: 'csp-begin' -> 'csp-end';

///////////////////////////////////////////////////////////////////////////////
// Sequence diagrams
///////////////////////////////////////////////////////////////////////////////

/*
 * Open design questions:
 * 
 * 0) Should sequence diagram assertions be part of the assertions production,
 *    or separate as with probabilistic assertions?
 * 1) Should the context of the diagram be part of its definition, or part of
 *    the assertion (eg 'assertion X: MODULE satisfies DIAGRAM')?
 * 2) When the actors in a diagram are the platform and the design, what should
 *    the design be called?  Currently it's 'module', which may be confusing.
 * 3) Is the given way to describe PSP scopes appropriate?
 * 4) How do we describe strict vs weak ordering?  Which should be implicit?
 *    Right now, strict ordering is explicit all the way to the end, when
 *    we default to weak ordering - a bit strange.
 * 5) How do we describe timing properties?
 */

/**
 * A sequence diagram.
 */
Sequence:
	'sequence' name=ID 'for' target=SequenceTarget 'with' (actors+=SequenceActor (',' actors+=SequenceActor)*) '{'
		(steps+=SequenceStep)
		('then' steps+=SequenceStep)*
		(isStrictEnd?='end')?
	'}'	
;

/**
 * The target of a sequence diagram.
 */
SequenceTarget:
	// This should be a QualifiedName when we merge with RoboCert.
	{ModuleSequenceTarget} 'module' module=[RCModule|QualifiedName]
;

/**
 * A participant in a sequence diagram.
 */
SequenceActor:
	{PlatformSequenceActor} 'world' name=ID |
	{ModuleSequenceActor} 'component' name=ID
;

// The basic trace is 'X then X then X... end'.  We can change to weak
// ordering by adding 'when' before X, or at the end by removing 'end'.
//
// As we improve the language, we'll want to capture property specification
// patterns (PSPs).
// The PSP scopes correspond to the following trace step sequences:
// 
// 'globally' => X
// 'after Q'  => when Q then X
// 'between Q and R' => ??
// 'after Q until R' => ??

/**
 * A step in a sequence diagram.
 */
SequenceStep:
	gap=SequenceGap action=SequenceAction
;

/**
 * An action in a sequence diagram.
 */
SequenceAction:
	{ArrowSequenceAction} body=SequenceArrow 'from' from=[SequenceActor] 'to' to=[SequenceActor] |
	{FinalSequenceAction} 'end'
;

/**
 * An arrow.
 */
SequenceArrow:
	// need arguments
	{EventSequenceArrow} 'event' event=[Event|QualifiedName] ('(' ')')? |
	{OperationSequenceArrow} 'operation' operation=[OperationSig|QualifiedName] '(' ')'
;

/**
 * A gap specification.
 */
SequenceGap:
	{AnythingSequenceGap} 'anything' 'until' |
	{StrictSequenceGap}
;

//
// Sequence assertions
//
// These are:
//
// - assertion ID: SEQUENCE is witnessed
//     (in CSP: sequence refines design)
// - assertion ID: SEQUENCE is not witnessed
//     (in CSP: sequence does not refine design)
//

/**
 * A RoboCert assertion.
 */
Assertion:
	'assertion' name=ID ':' body=AssertionBody
;

/**
 * A RoboCert assertion body.
 */
AssertionBody:
	{WitnessingSequenceAssertionBody} sequence=[Sequence] 'is' (isNegated?='not')? 'observed'
;