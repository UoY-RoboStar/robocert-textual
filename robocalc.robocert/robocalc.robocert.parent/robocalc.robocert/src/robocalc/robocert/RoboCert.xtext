// automatically generated by Xtext
grammar robocalc.robocert.RoboCert with circus.robocalc.robochart.textual.RoboChart

import "http://robocert.robocalc/" 
import "http://www.robocalc.circus/RoboChart"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/**
 * A top-level diagram.
 */
Package:
	( cspFragments += CSPFragment
	| sequences += Sequence
	| assertions += Assertion
	)*;

/**
 * A raw CSP fragment.
 * 
 * TODO: per meta-model, these will likely go away later on, replaced with
 *       process-bound CSP fragments only.
 */

CSPFragment:
	'include' contents = CSP_CODE;

terminal CSP_CODE: 'csp-begin' -> 'csp-end';

///////////////////////////////////////////////////////////////////////////////
// Sequence diagrams
///////////////////////////////////////////////////////////////////////////////

/*
 * Open design questions:
 * 
 * 0) Should sequence diagram assertions be part of the assertions production,
 *    or separate as with probabilistic assertions?
 * 1) Should the context of the diagram be part of its definition, or part of
 *    the assertion (eg 'assertion X: MODULE satisfies DIAGRAM')?
 * 2) When the actors in a diagram are the platform and the design, what should
 *    the design be called?  Currently it's 'module', which may be confusing.
 * 3) Is the given way to describe PSP scopes appropriate?
 * 4) How do we describe strict vs weak ordering?  Which should be implicit?
 *    Right now, strict ordering is explicit all the way to the end, when
 *    we default to weak ordering - a bit strange.
 * 5) How do we describe timing properties?
 */

/**
 * A sequence diagram.
 */
Sequence:
	'sequence' name=ID 'for' target=TargetSequenceActor ',' world=WorldSequenceActor '{'
		(steps+=SequenceStep)
		('then' steps+=SequenceStep)*
	'}'	
;

/**
 * The target actor of a sequence diagram.
 */
TargetSequenceActor:
	 'module' {ModuleSequenceActor} module=[RCModule|QualifiedName] 'as' name=ID
;

/**
 * The world actor of a sequence diagram.
 */
WorldSequenceActor:
	'world' 'as' name=ID
;

// The basic trace is 'X then X then X... end'.  We can change to weak
// ordering by adding 'when' before X, or at the end by removing 'end'.
//
// As we improve the language, we'll want to capture property specification
// patterns (PSPs).
// The PSP scopes correspond to the following trace step sequences:
// 
// 'globally' => X
// 'after Q'  => when Q then X
// 'between Q and R' => ??
// 'after Q until R' => ??

/**
 * A step in a sequence diagram.
 */
SequenceStep:
	gap=SequenceGap action=SequenceAction
;

/**
 * An action in a sequence diagram.
 */
SequenceAction:
	ArrowSequenceAction |
	'end' {FinalSequenceAction}
;

/**
 * An arrow sequence action.
 */
ArrowSequenceAction:
	body=SequenceArrow 'from' from=[SequenceActor] 'to' to=[SequenceActor]
;

/**
 * An arrow.
 */
SequenceArrow:
	'event' {EventSequenceArrow} event=[Event|QualifiedName] ArgList |
	'operation' {OperationSequenceArrow} operation=[OperationSig|QualifiedName] ArgList
;

/**
 * An event or operation argument list.
 */
fragment ArgList:
	// need arguments
	('(' ')')?
;

/**
 * A gap specification.
 */
SequenceGap:
	'anything' {LooseSequenceGap} ('in' allowed=ArrowSet)? ('except' forbidden=ArrowSet)? 'until' |
	{StrictSequenceGap}
;

/**
 * An arrow set specification.
 */
ArrowSet:
	'{' arrows+=ArrowSequenceAction (',' arrows+=ArrowSequenceAction)* '}'
;

/**
 * A RoboCert assertion.
 */
Assertion:
	'assertion' name=ID ':' body=AssertionBody
;

/**
 * A RoboCert assertion body.
 */
AssertionBody:
	SequenceAssertionBody
;
	
/**
 * A sequence assertion.
 *
 * These are:
 *
 * - assertion ID: SEQUENCE is observed (in CSP: sequence refines target)
 * - assertion ID: SEQUENCE is not observed (in CSP: sequence does not refine target)
 * - assertion ID: SEQUENCE holds (in CSP: target refines sequence)
 * - assertion ID: SEQUENCE does not hold (in CSP: target does not refine sequence)
 */
SequenceAssertionBody:
	{ObservedSequenceAssertionBody} sequence=[Sequence] 'is' (isNegated?='not')? 'observed' |
	{ImplementedSequenceAssertionBody} sequence=[Sequence] ('holds' | 'does' (isNegated?='not') 'hold')
;