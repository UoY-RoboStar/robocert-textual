/*
 * generated by Xtext 2.25.0
 */
package robocalc.robocert.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;

import com.google.inject.Inject;

import robocalc.robocert.generator.utils.EObjectExtensions;
import robocalc.robocert.model.robocert.ConstExpr;
import robocalc.robocert.model.robocert.EventTopic;
import robocalc.robocert.model.robocert.OperationTopic;
import robocalc.robocert.model.robocert.ConstAssignment;
import static robocalc.robocert.model.robocert.RoboCertPackage.Literals.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class RoboCertScopeProvider extends AbstractRoboCertScopeProvider {
	@Inject private EObjectExtensions ex;
	@Inject private ConstantScopeExtensions cx;
	@Inject private TopicScopeExtensions tx;

	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof EventTopic e && reference == EVENT_TOPIC__EVENT)
			return tx.getEventScope(e);
		if (context instanceof OperationTopic o && reference == OPERATION_TOPIC__OPERATION)
			return tx.getOperationScope(o);
		if (context instanceof ConstAssignment k && reference == CONST_ASSIGNMENT__CONSTANTS)
			return cx.constAssignmentScope(k);
		if (context instanceof ConstExpr x && reference == CONST_EXPR__CONSTANT) {
			var target = ex.getTargetOfParentGroup(x);
			if (target != null)
				return cx.targetScope(target);
		}
		return super.getScope(context, reference);
	}
}
