/********************************************************************************
 * Copyright (c) 2021 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Partially generated by Xtext 2.25.0
 *   Matt Windsor - initial implementation
 ********************************************************************************/
package robocalc.robocert.scoping;

import static robocalc.robocert.model.robocert.RoboCertPackage.Literals.CONST_ASSIGNMENT__CONSTANTS;
import static robocalc.robocert.model.robocert.RoboCertPackage.Literals.CONST_EXPR__CONSTANT;
import static robocalc.robocert.model.robocert.RoboCertPackage.Literals.EVENT_TOPIC__EVENT;
import static robocalc.robocert.model.robocert.RoboCertPackage.Literals.OPERATION_TOPIC__OPERATION;

import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import robocalc.robocert.model.robocert.ConstAssignment;
import robocalc.robocert.model.robocert.ConstExpr;
import robocalc.robocert.model.robocert.EventTopic;
import robocalc.robocert.model.robocert.OperationTopic;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class RoboCertScopeProvider extends AbstractRoboCertScopeProvider {
	@Inject private VariableScopeProvider vsp;
	@Inject private TopicScopeProvider tx;

	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		final var scope = tryGetScope(context, reference);
		return scope == null ? super.getScope(context, reference) : scope;
	}
	
	/**
	 * Tries to get a custom scope for the given context and reference.
	 *
	 * @param context   context of the feature being resolved.
	 * @param reference reference to the feature being resolved.
	 * 
	 * @return the custom scope (may be null, in which case we delegate to the
	 *         parent scoping rules).
	 */
	private IScope tryGetScope(EObject context, EReference reference) {
		if (context instanceof EventTopic e && reference == EVENT_TOPIC__EVENT)
			return tx.getEventScope(e);
		if (context instanceof OperationTopic o && reference == OPERATION_TOPIC__OPERATION)
			return tx.getOperationScope(o);
		if (context instanceof ConstAssignment k && reference == CONST_ASSIGNMENT__CONSTANTS)
			return vsp.constAssignmentScope(k);
		if (context instanceof ConstExpr x && reference == CONST_EXPR__CONSTANT)
			return vsp.exprScope(x);
		return null;
	}
}
