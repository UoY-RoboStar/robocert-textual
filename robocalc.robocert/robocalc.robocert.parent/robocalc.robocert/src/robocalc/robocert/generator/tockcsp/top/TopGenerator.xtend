package robocalc.robocert.generator.tockcsp.top

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import robocalc.robocert.generator.tockcsp.ll.CSPGroupGenerator
import robocalc.robocert.model.robocert.CSPGroup
import robocalc.robocert.model.robocert.SequenceGroup
import java.util.Date
import java.text.SimpleDateFormat
import robocalc.robocert.generator.utils.UnsupportedSubclassHandler
import robocalc.robocert.model.robocert.Group
import robocalc.robocert.generator.tockcsp.seq.SeqGroupGenerator
import robocalc.robocert.model.robocert.AssertionGroup

/**
 * Top-level generator for tock-CSP.
 */
class TopGenerator {
	@Inject AssertionGroupGenerator ag
	@Inject CSPGroupGenerator cg
	@Inject SeqGroupGenerator sg
	@Inject extension ImportGenerator
	@Inject extension UnsupportedSubclassHandler

	/**
	 * @return generated CSP for all elements.
	 * 
	 * @param resource  the top-level property model.
	 */
	def CharSequence generate(Resource resource) '''
		«generateHeader»
		
		«resource.generateImports»
		
		«resource.generateGroups»
	'''

	/**
	 * Similar to CUntimedGenerator in RoboChart, and should probably include
	 * the version eventually too.
	 * 
	 * @return the generated header.
	 */
	def private generateHeader() '''
		--- generated by RoboCert sequences experiment
		--- on «timestamp»
	'''

	/**
	 * @return the current datetime as a human-readable timestamp.
	 */
	def private timestamp() {
		new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())
	}

	/**
	 * @return included CSP for all groups.
	 * 
	 * @param resource  the top-level property model.
	 */
	private def generateGroups(Resource resource) '''
		«FOR it : resource.allContents.filter(Group).toIterable SEPARATOR '\n\n'»
			«generateGroup»
		«ENDFOR»
	'''

	def private dispatch generateGroup(CSPGroup it) {
		cg.generate(it)
	}

	def private dispatch generateGroup(SequenceGroup it) {
		sg.generate(it)
	}

	def private dispatch generateGroup(AssertionGroup it) {
		ag.generate(it)
	}

	def private dispatch generateGroup(Group it) {
		unsupported("group", "")
	}
}
