package robocalc.robocert.generator.tockcsp.top

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import robocalc.robocert.generator.tockcsp.seq.SequenceGenerator
import robocalc.robocert.model.robocert.Assertion
import robocalc.robocert.model.robocert.CSPGroup
import robocalc.robocert.model.robocert.SequenceGroup

/**
 * Top-level generator for tock-CSP.
 */
class TopGenerator {
	@Inject extension AssertionGenerator
	@Inject extension CSPGroupGenerator
	@Inject extension ImportGenerator
	@Inject extension SequenceGenerator
	
	/**
	 * @return generated CSP for all elements.
	 * 
	 * @param resource  the top-level property model.
	 */
	def CharSequence generate(Resource resource) '''
		-- generated by RoboCert sequence experiment

		«resource.generateImports»

		--
		-- CSP fragments
		--
		
		«resource.generateCSPGroups»
		
		--
		-- Sequences
		--
		
		«resource.generateSequenceGroups»
		
		--
		-- Assertions
		--
		
		«resource.generateAssertions»
	'''

	//
	// CSP fragments
	//
	/**
	 * @return included CSP for all raw CSP fragments.
	 * 
	 * @param resource  the top-level property model.
	 */
	private def generateCSPGroups(Resource resource) '''
		«FOR csp : resource.allContents.filter(CSPGroup).toIterable»
			«csp.generate»
		«ENDFOR»
	'''

	/**
	 * @return generated CSP for all sequences.
	 * 
	 * @param resource  the top-level property model.
	 */
	private def generateSequenceGroups(Resource resource ) '''
		«FOR group : resource.allContents.filter(SequenceGroup).toIterable»
			«group.generateGroup»
		«ENDFOR»
	'''

	//
	// Assertions
	//
	/**
	 * @return generated CSP for all assertions.
	 * 
	 * @param resource  the top-level property model.
	 */
	private def generateAssertions(Resource resource) '''
		«FOR asst : resource.allContents.filter(Assertion).toIterable»
			«asst.generate»
		«ENDFOR»
	'''
}