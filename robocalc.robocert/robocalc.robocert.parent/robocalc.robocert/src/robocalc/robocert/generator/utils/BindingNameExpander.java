/**
 * 
 */
package robocalc.robocert.generator.utils;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;

import robocalc.robocert.model.robocert.Binding;
import robocalc.robocert.model.robocert.Sequence;

/**
 * Expands binding names to be unambiguous across scope boundaries.
 */
public class BindingNameExpander {
	/**
	 * Produces an unambiguous name for a binding within its notational
	 * container.
	 *
	 * Names generated by this method are long, systematic, sensitive to
	 * changes in the metamodel, and not guaranteed to be particularly
	 * human-readable, but should theoretically be unique within the container.
	 *
	 * @param b  the binding for which we are generating an unambiguous name.
	 * @return   the unambiguous name.
	 */
	public String getUnambiguousName(Binding b) {
		// Approach: just take the relative URI of the binding within its
		// notation container (or some unambiguous portion thereof), and
		// sanitise it into a format that'll work with RoboCert's backends.
		var root = rootOfUnambiguousName(b);
		return root == null ? b.getName() : constructUnambiguousName(root, b);
	}

	private EObject rootOfUnambiguousName(Binding b) {
		// Is this binding inside a sequence diagram?
		var seq = EcoreUtil2.getContainerOfType(b, Sequence.class);
		if (seq != null) {
			// Redundant to include the step from sequence to body in the name.
			return seq.getBody();
		}
		
		// If bindings can appear in other places in future, they go here.
		
		return null;
	}
	
	private String constructUnambiguousName(EObject from, Binding b) {
		// If we got here, we assume that the binding has at least one
		// container.  We also assume that each binding container only has
		// at most one binding (and so, it's redundant to include the step
		// from binding container to binding).
		return sanitise(EcoreUtil2.getRelativeURIFragmentPath(from, b.eContainer()));
	}
	
	private String sanitise(String raw) {
		// - ensure existing underscores don't clash with ones we insert later
		// - strip out unnecessary sigils and list clutter
		// - slashes are unlikely to be suitable as identifiers, remove them
		return raw.replace("_", "__").replaceAll("(@|s?\\.)", "").replace("/", "_");
	}
}
