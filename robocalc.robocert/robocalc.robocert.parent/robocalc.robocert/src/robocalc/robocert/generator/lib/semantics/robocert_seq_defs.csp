-- *************************************************************************
-- Copyright (c) 2021, 2022 University of York and others
--
-- This program and the accompanying materials are made available under the
-- terms of the Eclipse Public License 2.0 which is available at
-- http://www.eclipse.org/legal/epl-2.0.
--
-- SPDX-License-Identifier: EPL-2.0
--
-- Contributors:
--   Matt Windsor - initial definition
-- *************************************************************************

{- This file contains definitions relied upon by the RoboCert sequence CSP
   semantics.
   
   It is intended to be auto-included into the output of the RoboCert CSP
   generator, and expects the RoboChart 'core_timed_defs' to be open. -}

-- This is the version of robocert_seq_defs.csp for version 0.1.0
-- last updated on: 2022-05-04

{-
 - Until fragment synchronisation
 -
 - These components are used when translating multi-lifeline sequences with UntilFragments.  For
 - single-lifeline sequences, we emit `Until` instead.
 -}

-- Direction of synchronisation with until-processes and par-fragments.
datatype SyncDir = enter | leave

-- Synchronisation at the end of a par construct.
-- Deliberately untimed; we don't want any errant tocks to occur here.
ParSync(chan, index__)(P) = P; chan.index__.leave -> SKIP

Timed(OneStep) {
  -- Pauses the lifeline to hand over to an UntilFragment on the until-process.
  -- Resumes once the body of the UntilFragment has finished.
  UntilSync(chan, index__) = chan.index__.enter -> chan.index__.leave -> SKIP
}


{-
 - Memory
 -}

-- Memory operations.
datatype MemOp = get | set


{-
 - Occurrences
 -}

-- Combinator for allowing an occurrence to be put off, perhaps indefinitely.
Cold(A) = A |~| tock -> Cold(A)


{-
 - Block fragments
 -
 - Every block fragment gets translated to the form F(Body), where F is one of the functions below,
 - possibly partially applied.
 -}

Timed(OneStep) {
  -- Semantics of an until fragment.
  Until(intraMessages__, initial__)(P__) =
    TCHAOS(diff(intraMessages__, initial__)) /\ P__

  -- Semantics of an optionality fragment.
  Opt(P__) = P__ |~| SKIP

  -- Semantics of a deadline fragment.
  -- Can't be called Deadline; this name is taken by RoboChart's stdlib.
  DeadlineF(ub__)(P__) = EndBy(P__, ub__)
}

-- Use the standard FDR loop function for infinite loops.
external loop

-- Loops P__ an indefinite number of times.
-- Similar to `loop` but allows termination at any time.
LoopIndef(P__) =
  SKIP |~| P__; LoopIndef(P__)

-- Loops P__ exactly bnd__ times.
BoundedLoop(bnd__)(P__) =
  if bnd__ <= 0 then SKIP else P__; BoundedLoop(bnd__ - 1)(P__)

-- Loops P__ at most ub__ times.
BoundedLoopUB(ub__)(P__) =
  if ub__ <= 0 then SKIP else (SKIP |~| (P__; BoundedLoopUB(ub__ - 1)(P__)))

-- Loops P__ between lb__ and ub__ times.
BoundedLoopBetween(lb__, ub__)(P__) =
  BoundedLoop(lb__)(P__); BoundedLoopUB(ub__ - lb__)(P__)
		
-- Loops P__ at least lb__ times.
BoundedLoopLB(lb__)(P__) =
  BoundedLoop(lb__)(P__); LoopIndef(P__)