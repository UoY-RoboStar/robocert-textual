/*
 * generated by Xtext 2.25.0
 */
package robocalc.robocert.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

import com.google.common.collect.Iterators;
import com.google.inject.Inject;

import robocalc.robocert.generator.tockcsp.CertPackageGenerator;
import robocalc.robocert.generator.utils.FilenameExtensions;
import robocalc.robocert.model.robocert.CertPackage;

/**
 * Generates code from your model files on save.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class RoboCertGenerator extends AbstractGenerator {
	@Inject
	private CertPackageGenerator csp;
	@Inject
	private FilenameExtensions fx;

	@Override
	public void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		EcoreUtil.resolveAll(resource.getResourceSet());

		var isCanceled = generateCSPStandardLibrary(fsa, context);
		if (isCanceled)
			return;

		generateCSPPackages(resource, fsa, context);
	}

	private boolean generateCSPStandardLibrary(IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (var filename : CSP_LIBRARY_FILES) {
			generateCSPStandardLibraryFile(fsa, filename);
			if (context.getCancelIndicator().isCanceled())
				return true;
		}
		return false;
	}

	private void generateCSPStandardLibraryFile(IFileSystemAccess2 fsa, String filename) {
		var stream = RoboCertGenerator.class.getResourceAsStream("lib/semantics/" + filename);
		fsa.generateFile(filename, RoboCertOutputConfigurationProvider.CSP_LIBRARY_OUTPUT, stream);
	}

	private void generateCSPPackages(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		Iterators.filter(EcoreUtil.getAllContents(resource, true), CertPackage.class).forEachRemaining(x -> {
			// TODO(@MattWindsor91): multiple packages in one resource?
			fsa.generateFile(fx.getFileBasename(x) + ".csp", csp.generate(x));
		});
	}

	private static final String[] CSP_LIBRARY_FILES = new String[] { "robocert_defs.csp", "robocert_seq_defs.csp" };
}
