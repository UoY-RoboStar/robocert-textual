--- generated by RoboCert
--- on 29-11-2021 15:22:47

include "../lib/robocert_defs.csp"
include "../../instantiations.csp"
include "../../defs/relation_toolkit_defs.csp"
include "../../defs/function_toolkit_defs.csp"
include "../../defs/core_defs.csp"
include "../../defs/set_toolkit_defs.csp"
include "../../defs/sequence_toolkit_defs.csp"
include "../../defs/file_PID_defs.csp"
include "../../defs/file_AngleCalculation_defs.csp"
include "../../defs/file_SegwayRP_defs.csp"
include "../../defs/file_Segway_defs.csp"
include "../../defs/file_RotationPID_defs.csp"
include "../../defs/file_AnglePID_defs.csp"
include "../../defs/file_BalanceSTM_defs.csp"
include "../../defs/file_SpeedPID_defs.csp"


--- BEGIN TARGET GROUP Untitled_Group__0_file_properties
module Untitled_Group__0_file_properties
exports
	module S
	exports
		instance TTContext = model_shifting(Segway::sem__events)
		
		Universe = Segway::sem__events
		
		Open = Segway::D__
		
		Closed = Open(
			{- id -} 0,
			const_BalanceSTM_maxAngle,
			const_BalanceSTM_loopTime,
			const_BalanceSTM_startupDelay,
			const_BalanceSTM_speedUpdate,
			const_BalanceSTM_rotationUpdate,
			const_BalanceSTM_angleBudget,
			const_BalanceSTM_speedBudget,
			const_BalanceSTM_rotationBudget,
			const_BalanceSTM_motorBudget,
			const_AnglePID_P,
			const_AnglePID_D,
			const_SpeedPID_P,
			const_SpeedPID_I,
			const_SpeedPID_maxIntegral,
			const_RotationPID_D
		)
	endmodule
endmodule

--- END TARGET GROUP

--- BEGIN UNTIMED CSP GROUP Untitled_Group__1_file_properties

		SegwayRPEvents = Segway::sem__events
	
setLeftMotorSpeed_setRightMotorSpeed_csp =
	
			-- allow any events except setLeftMotorSpeed()
			-- (the assertion doesn't restrict the occurrence of setRightMotorSpeed() except for when one is required to happen)
			([] e : diff(SegwayRPEvents, {| Segway::setLeftMotorSpeedCall |}) @ e -> setLeftMotorSpeed_setRightMotorSpeed_csp)
			 []
			-- tock events are allowed except after angle
			tock -> setLeftMotorSpeed_setRightMotorSpeed_csp
			 []
			-- setLeftMotorSpeed() is immediately followed by setRightMotorSpeed()
			Segway::setLeftMotorSpeedCall?x -> Segway::setRightMotorSpeedCall?x -> setLeftMotorSpeed_setRightMotorSpeed_csp

disableInterrupts_enableInterrupts_csp =
	
			-- allow any events except disabling interrupts 
			-- (the assertion doesn't restrict the occurence of enabling interrupts except for when one is required to happen)
			([] e : diff(SegwayRPEvents, {| Segway::disableInterruptsCall |}) @ e -> disableInterrupts_enableInterrupts_csp)
			 []
			-- tock events are allowed except after disabling interrupts
			tock -> disableInterrupts_enableInterrupts_csp
			 []
			-- disableInterrupts() is immediately followed by enableInterrupts()
			Segway::disableInterruptsCall -> Segway::enableInterruptsCall -> disableInterrupts_enableInterrupts_csp

	
	-- outside timed section, so we can count the tock events
	SequenceDisableInterruptsLoopTimeCount(count) =
		-- allow any events except disabling interrupts 
		([] e : diff(SegwayRPEvents, {| Segway::disableInterruptsCall |}) @ e -> SequenceDisableInterruptsLoopTimeCount(count))
		 []
		-- allow tocks if fewer than loopTime have happened and count them
		(count < const_BalanceSTM_loopTime) & tock -> SequenceDisableInterruptsLoopTimeCount(count+1)
		 []
		-- reset the count when disableInterrupts() is called
		Segway::disableInterruptsCall -> SequenceDisableInterruptsLoopTimeCount(0)
	

	SequenceGyroXAngleBudget = gyroX_angleBudget_csp
	-- in the restricted state, only gyroZ, leftMotorVelocity, setLeftMotorSpeed() and tock events are allowed
	SequenceGyroXAngleBudgetRestrict(tockCount) =
		-- allow tock events if fewer than angleBudget have happened
		(tockCount < const_BalanceSTM_angleBudget) & tock -> SequenceGyroXAngleBudgetRestrict(tockCount+1)
		 []
		-- go back to allowing other events when a gyroZ, leftMotorVelocity or setLeftMotorSpeedCall event occurs
		Segway::gyroZ.in?x -> SequenceGyroXAngleBudget
		 []
		Segway::leftMotorVelocity.in?x -> SequenceGyroXAngleBudget
		 []
		Segway::setLeftMotorSpeedCall?x -> SequenceGyroXAngleBudget	
	

	SequenceRightMotorVelocitySpeedBudget = rightMotorVelocity_speedBudget_csp
	-- outside a timed section so tock events can be counted
	-- in the restricted state, only gyroZ, setLeftMotorSpeed() and tock events are allowed
	SequenceRightMotorVelocitySpeedBudgetRestrict(tockCount) =
		-- allow tock events if fewer than speedBudget have happened
		(tockCount < const_BalanceSTM_speedBudget) & tock -> SequenceRightMotorVelocitySpeedBudgetRestrict(tockCount+1)
		 []
		-- go back to allowing other events when a gyroZ or setLeftMotorSpeedCall event occurs
		Segway::gyroZ.in?x -> SequenceRightMotorVelocitySpeedBudget
		 []
		Segway::setLeftMotorSpeedCall?x -> SequenceRightMotorVelocitySpeedBudget
	

	SequenceGyroZRotationBudget = gyroZ_rotationBudget_csp
	-- outside a timed section so tock events can be counted
	-- in the restricted state, only setLeftMotorSpeed() and tock events are allowed
	SequenceGyroZRotationBudgetRestrict(tockCount) =
		-- allow tock events if fewer than rotationBudget have happened
		(tockCount < const_BalanceSTM_rotationBudget) & tock -> SequenceGyroZRotationBudgetRestrict(tockCount+1)
		 []
		-- go back to allowing other events when a setLeftMotorSpeedCall event occurs
		Segway::setLeftMotorSpeedCall?x -> SequenceGyroZRotationBudget	
	

	SequenceSetRightMotorSpeedDisableInterrupts = setRightMotorSpeed_disableInterrupts_csp
	-- outside timed section, so we can count the tock events
	-- no events other than tock and disableInterruptsCall are allowed here, since there must be no other observations inbetween
	SequenceSetRightMotorSpeedDisableInterruptsCount(count) =
		-- allow tocks if fewer than loopTime have happened and count them
		(count < const_BalanceSTM_loopTime) & tock -> SequenceSetRightMotorSpeedDisableInterruptsCount(count+1)
		 []
		-- go back to waiting for setRightMotorSpeed() when disableInterrupts() is called
		Segway::disableInterruptsCall -> SequenceSetRightMotorSpeedDisableInterrupts
	
--- END UNTIMED CSP GROUP

--- BEGIN CSP GROUP Untitled_Group__2_file_properties
Timed(OneStep) {
	NoPIDs_csp =
		
			RUN(Union({
				{tock},
				diff(SegwayRPEvents, {|Segway::setLeftMotorSpeedCall, Segway::setRightMotorSpeedCall|}),
				{Segway::setLeftMotorSpeedCall.0, Segway::setRightMotorSpeedCall.0}
			}))	
	
	init_time_csp =
		
			WAIT(const_BalanceSTM_startupDelay + const_BalanceSTM_loopTime); RUN(union(Segway::sem__events, {tock}))
	
	disableInterrupts_loopTime_csp =
		
			-- there are no restrictions until the first disableInterrupts() call
			-- allow any events except disabling interrupts 
			([] e : diff(SegwayRPEvents, {| Segway::disableInterruptsCall |}) @ e -> disableInterrupts_loopTime_csp)
			 []
			-- when interrupts are disabled, begin counting tock events
			Segway::disableInterruptsCall -> SequenceDisableInterruptsLoopTimeCount(0)
	
	gyroX_angleBudget_csp =
		
			-- allow any events other than gyroX
			([] e : diff(SegwayRPEvents, {| Segway::gyroX |}) @ e -> SequenceGyroXAngleBudget)
			 []
			-- when gyroX occurs, enter the restricted state
			Segway::gyroX.in?x -> SequenceGyroXAngleBudgetRestrict(0)
	
	rightMotorVelocity_speedBudget_csp =
		
			-- allow any events other than rightMotorVelocity
			([] e : diff(SegwayRPEvents, {| Segway::rightMotorVelocity |}) @ e -> SequenceRightMotorVelocitySpeedBudget)
			 []
			-- when rightMotorVelocity occurs, enter the restricted state
			Segway::rightMotorVelocity.in?x -> SequenceRightMotorVelocitySpeedBudgetRestrict(0)
	
	gyroZ_rotationBudget_csp =
		 
			-- allow any events other than gyroZ
			([] e : diff(SegwayRPEvents, {| Segway::gyroZ |}) @ e -> SequenceGyroZRotationBudget)
			 []
			-- when gyroZ occurs, enter the restricted state
			Segway::gyroZ.in?x -> SequenceGyroZRotationBudgetRestrict(0)
	
	setRightMotorSpeed_disableInterrupts_csp =
		 
			-- there are no restrictions until the first setRightMotorSpeed() call
			-- allow any events except setting right motor speed
			([] e : diff(SegwayRPEvents, {| Segway::setRightMotorSpeedCall |}) @ e -> SequenceSetRightMotorSpeedDisableInterrupts)
			 []
			-- when setRightMotorSpeed() occurs, begin counting tock events
			Segway::setRightMotorSpeedCall?x -> SequenceSetRightMotorSpeedDisableInterruptsCount(0)
}

--- END CSP GROUP

--- BEGIN SEQUENCE GROUP NoPid
module NoPid
	module MsgSets
	exports
		Universe = Segway::sem__events
		MotorSpeed = union({ Segway::setLeftMotorSpeedCall.Bnd__0
		 | Bnd__0 <- core_real }, { Segway::setRightMotorSpeedCall.Bnd__0
		 | Bnd__0 <- core_real })
	endmodule
exports
	module Open(
		const_BalanceSTM_maxAngle,
		const_BalanceSTM_loopTime,
		const_BalanceSTM_startupDelay,
		const_BalanceSTM_speedUpdate,
		const_BalanceSTM_rotationUpdate,
		const_BalanceSTM_angleBudget,
		const_BalanceSTM_speedBudget,
		const_BalanceSTM_rotationBudget,
		const_BalanceSTM_motorBudget,
		const_SpeedPID_maxIntegral
	)
	exports
		Target = Untitled_Group__0_file_properties::S::Open(
			{- id -} 0,
			const_BalanceSTM_maxAngle,
			const_BalanceSTM_loopTime,
			const_BalanceSTM_startupDelay,
			const_BalanceSTM_speedUpdate,
			const_BalanceSTM_rotationUpdate,
			const_BalanceSTM_angleBudget,
			const_BalanceSTM_speedBudget,
			const_BalanceSTM_rotationBudget,
			const_BalanceSTM_motorBudget,
			{- const_AnglePID_P -} 0,
			{- const_AnglePID_D -} 0,
			{- const_SpeedPID_P -} 0,
			{- const_SpeedPID_I -} 0,
			const_SpeedPID_maxIntegral,
			{- const_RotationPID_D -} 0
		)
		
		module Seqs
		exports
			Timed(OneStep) {
				NoPIDs = (loop({- alternative (HOT) -} (
					(
						Action(diff(MsgSets::Universe, MsgSets::MotorSpeed), {| Segway::setLeftMotorSpeedCall.0 |})(Cold(Segway::setLeftMotorSpeedCall.0 -> SKIP))
					)[](
						Action(diff(MsgSets::Universe, MsgSets::MotorSpeed), {| Segway::setRightMotorSpeedCall.0 |})(Cold(Segway::setRightMotorSpeedCall.0 -> SKIP))
					)
				)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				init_time = (Action({}, {})(Cold(WAIT(const_BalanceSTM_startupDelay)));
				Action({}, {})(Cold(WAIT(const_BalanceSTM_loopTime)));
				Action(MsgSets::Universe, {})(Cold(STOP))
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				init_disableInterrupts = (Action({}, {| Segway::disableInterruptsCall |})(Cold(Segway::disableInterruptsCall -> SKIP));
				Action(MsgSets::Universe, {})(Cold(STOP))
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				disableInterrupts_loopTime = (Action(MsgSets::Universe, {| Segway::disableInterruptsCall |})(Cold(Segway::disableInterruptsCall -> SKIP));
				loop(EndBy((Action(MsgSets::Universe, {| Segway::disableInterruptsCall |})(Cold(Segway::disableInterruptsCall -> SKIP))
				), {- time units -} const_BalanceSTM_loopTime)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				disableInterrupts_enableInterrupts = (loop(Action(MsgSets::Universe, {| Segway::disableInterruptsCall |})(Cold(Segway::disableInterruptsCall -> SKIP));
				EndBy((Action({}, {| Segway::enableInterruptsCall |})(Cold(Segway::enableInterruptsCall -> SKIP))
				), {- time units -} 0)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				enableInterrupts_angle = (loop(Action(MsgSets::Universe, {| Segway::enableInterruptsCall |})(Cold(Segway::enableInterruptsCall -> SKIP));
				EndBy((Action({}, { Segway::angle.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::angle.in?_ -> SKIP))
				), {- time units -} 0)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				angle_gyroX = (loop(Action(MsgSets::Universe, { Segway::angle.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::angle.in?_ -> SKIP));
				EndBy((Action({}, { Segway::gyroX.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::gyroX.in?_ -> SKIP))
				), {- time units -} 0)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				gyroX_leftMotorVelocity = (loop(loop_exactly(const_BalanceSTM_speedUpdate)(Action(MsgSets::Universe, { Segway::gyroX.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::gyroX.in?_ -> SKIP))
				);
				EndBy((Action({}, { Segway::leftMotorVelocity.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::leftMotorVelocity.in?_ -> SKIP))
				), {- time units -} const_BalanceSTM_speedBudget)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				gyroX_angleBudget = (loop(Action(diff(MsgSets::Universe, { Segway::gyroX.out.Bnd__0
				 | Bnd__0 <- core_real }), { Segway::gyroX.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::gyroX.in?_ -> SKIP));
				EndBy(({- alternative (HOT) -} (
					(
						Action({}, { Segway::leftMotorVelocity.in.Bnd__0
						 | Bnd__0 <- core_real })(Cold(Segway::leftMotorVelocity.in?_ -> SKIP))
					)[](
						Action({}, { Segway::gyroZ.in.Bnd__0
						 | Bnd__0 <- core_real })(Cold(Segway::gyroZ.in?_ -> SKIP))
					)[](
						Action({}, { Segway::setLeftMotorSpeedCall.Bnd__0
						 | Bnd__0 <- core_real })(Cold(Segway::setLeftMotorSpeedCall?_ -> SKIP))
					)
				)
				), {- time units -} const_BalanceSTM_angleBudget)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				leftMotorVelocity_rightMotorVelocity = (loop(Action(MsgSets::Universe, { Segway::leftMotorVelocity.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::leftMotorVelocity.in?_ -> SKIP));
				EndBy((Action({}, { Segway::rightMotorVelocity.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::rightMotorVelocity.in?_ -> SKIP))
				), {- time units -} 0)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				rightMotorVelocity_speedBudget = (loop(Action(diff(MsgSets::Universe, { Segway::rightMotorVelocity.out.Bnd__0
				 | Bnd__0 <- core_real }), { Segway::rightMotorVelocity.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::rightMotorVelocity.in?_ -> SKIP));
				EndBy(({- alternative (COLD) -} (
					(
						Action({}, { Segway::gyroZ.in.Bnd__0
						 | Bnd__0 <- core_real })(Cold(Segway::gyroZ.in?_ -> SKIP))
					)|~|(
						Action({}, { Segway::setLeftMotorSpeedCall.Bnd__0
						 | Bnd__0 <- core_real })(Cold(Segway::setLeftMotorSpeedCall?_ -> SKIP))
					)
				)
				), {- time units -} const_BalanceSTM_speedBudget)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				gyroZ_rotationBudget = (loop(Action(diff(MsgSets::Universe, { Segway::gyroZ.out.Bnd__0
				 | Bnd__0 <- core_real }), { Segway::gyroZ.in.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::gyroZ.in?_ -> SKIP));
				EndBy((Action({}, { Segway::setLeftMotorSpeedCall.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::setLeftMotorSpeedCall?_ -> SKIP))
				), {- time units -} const_BalanceSTM_rotationBudget)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				setLeftMotorSpeed_setRightMotorSpeed = (loop(Action(MsgSets::Universe, { Segway::setLeftMotorSpeedCall.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::setLeftMotorSpeedCall?_ -> SKIP));
				EndBy((Action({}, { Segway::setRightMotorSpeedCall.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::setRightMotorSpeedCall?_ -> SKIP))
				), {- time units -} 0)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
				
				setRightMotorSpeed_disableInterrupts = (loop(Action(MsgSets::Universe, { Segway::setRightMotorSpeedCall.Bnd__0
				 | Bnd__0 <- core_real })(Cold(Segway::setRightMotorSpeedCall?_ -> SKIP));
				EndBy((Action({}, {| Segway::disableInterruptsCall |})(Cold(Segway::disableInterruptsCall -> SKIP))
				), {- time units -} const_BalanceSTM_loopTime)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
			}
		endmodule
	endmodule
	
	instance Closed = Open(
		const_BalanceSTM_maxAngle,
		const_BalanceSTM_loopTime,
		const_BalanceSTM_startupDelay,
		const_BalanceSTM_speedUpdate,
		const_BalanceSTM_rotationUpdate,
		const_BalanceSTM_angleBudget,
		const_BalanceSTM_speedBudget,
		const_BalanceSTM_rotationBudget,
		const_BalanceSTM_motorBudget,
		const_SpeedPID_maxIntegral
	)
endmodule

--- END SEQUENCE GROUP

--- BEGIN ASSERTION GROUP Conformance
-- Assertion NoPIDs
assert NoPid::Closed::Seqs::NoPIDs [T= NoPIDs_csp :[tau priority]: {tock}
assert NoPIDs_csp [T= NoPid::Closed::Seqs::NoPIDs :[tau priority]: {tock}
-- Assertion init_time
assert NoPid::Closed::Seqs::init_time [T= init_time_csp :[tau priority]: {tock}
assert init_time_csp [T= NoPid::Closed::Seqs::init_time :[tau priority]: {tock}
-- Assertion disableInterrupts_loopTime
assert NoPid::Closed::Seqs::disableInterrupts_loopTime [T= disableInterrupts_loopTime_csp :[tau priority]: {tock}
assert disableInterrupts_loopTime_csp [T= NoPid::Closed::Seqs::disableInterrupts_loopTime :[tau priority]: {tock}
-- Assertion disableInterrupts_enableInterrupts
assert NoPid::Closed::Seqs::disableInterrupts_enableInterrupts [T= disableInterrupts_enableInterrupts_csp :[tau priority]: {tock}
assert disableInterrupts_enableInterrupts_csp [T= NoPid::Closed::Seqs::disableInterrupts_enableInterrupts :[tau priority]: {tock}
-- Assertion gyroX_angleBudget
assert NoPid::Closed::Seqs::gyroX_angleBudget [T= gyroX_angleBudget_csp :[tau priority]: {tock}
assert gyroX_angleBudget_csp [T= NoPid::Closed::Seqs::gyroX_angleBudget :[tau priority]: {tock}
-- Assertion rightMotorVelocity_speedBudget
assert NoPid::Closed::Seqs::rightMotorVelocity_speedBudget [T= rightMotorVelocity_speedBudget_csp :[tau priority]: {tock}
assert rightMotorVelocity_speedBudget_csp [T= NoPid::Closed::Seqs::rightMotorVelocity_speedBudget :[tau priority]: {tock}
-- Assertion gyroZ_rotationBudget
assert NoPid::Closed::Seqs::gyroZ_rotationBudget [T= gyroZ_rotationBudget_csp :[tau priority]: {tock}
assert gyroZ_rotationBudget_csp [T= NoPid::Closed::Seqs::gyroZ_rotationBudget :[tau priority]: {tock}
-- Assertion setLeftMotorSpeed_setRightMotorSpeed
assert NoPid::Closed::Seqs::setLeftMotorSpeed_setRightMotorSpeed [T= setLeftMotorSpeed_setRightMotorSpeed_csp :[tau priority]: {tock}
assert setLeftMotorSpeed_setRightMotorSpeed_csp [T= NoPid::Closed::Seqs::setLeftMotorSpeed_setRightMotorSpeed :[tau priority]: {tock}
-- Assertion setRightMotorSpeed_disableInterrupts
assert NoPid::Closed::Seqs::setRightMotorSpeed_disableInterrupts [T= setRightMotorSpeed_disableInterrupts_csp :[tau priority]: {tock}
assert setRightMotorSpeed_disableInterrupts_csp [T= NoPid::Closed::Seqs::setRightMotorSpeed_disableInterrupts :[tau priority]: {tock}
--- END ASSERTION GROUP

--- BEGIN ASSERTION GROUP ConformanceTT
-- Assertion NoPIDs
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::NoPIDs) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPIDs_csp)
-- Assertion init_time
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::init_time) [T= Untitled_Group__0_file_properties::S::TTContext::TT(init_time_csp)
-- Assertion disableInterrupts_loopTime
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::disableInterrupts_loopTime) [T= Untitled_Group__0_file_properties::S::TTContext::TT(disableInterrupts_loopTime_csp)
-- Assertion disableInterrupts_enableInterrupts
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::disableInterrupts_enableInterrupts) [T= Untitled_Group__0_file_properties::S::TTContext::TT(disableInterrupts_enableInterrupts_csp)
-- Assertion gyroX_angleBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::gyroX_angleBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(gyroX_angleBudget_csp)
-- Assertion rightMotorVelocity_speedBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::rightMotorVelocity_speedBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(rightMotorVelocity_speedBudget_csp)
-- Assertion gyroZ_rotationBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::gyroZ_rotationBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(gyroZ_rotationBudget_csp)
-- Assertion setLeftMotorSpeed_setRightMotorSpeed
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::setLeftMotorSpeed_setRightMotorSpeed) [T= Untitled_Group__0_file_properties::S::TTContext::TT(setLeftMotorSpeed_setRightMotorSpeed_csp)
-- Assertion setRightMotorSpeed_disableInterrupts
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::setRightMotorSpeed_disableInterrupts) [T= Untitled_Group__0_file_properties::S::TTContext::TT(setRightMotorSpeed_disableInterrupts_csp)
--- END ASSERTION GROUP

--- BEGIN ASSERTION GROUP Holds
-- Assertion NoPIDs
assert NoPid::Closed::Seqs::NoPIDs [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion init_time
assert NoPid::Closed::Seqs::init_time [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion init_disableInterrupts
assert NoPid::Closed::Seqs::init_disableInterrupts [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion disableInterrupts_loopTime
assert NoPid::Closed::Seqs::disableInterrupts_loopTime [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion disableInterrupts_enableInterrupts
assert NoPid::Closed::Seqs::disableInterrupts_enableInterrupts [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion enableInterrupts_angle
assert NoPid::Closed::Seqs::enableInterrupts_angle [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion angle_gyroX
assert NoPid::Closed::Seqs::angle_gyroX [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion gyroX_leftMotorVelocity
assert NoPid::Closed::Seqs::gyroX_leftMotorVelocity [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion gyroX_angleBudget
assert NoPid::Closed::Seqs::gyroX_angleBudget [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion leftMotorVelocity_rightMotorVelocity
assert NoPid::Closed::Seqs::leftMotorVelocity_rightMotorVelocity [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion rightMotorVelocity_speedBudget
assert NoPid::Closed::Seqs::rightMotorVelocity_speedBudget [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion gyroZ_rotationBudget
assert NoPid::Closed::Seqs::gyroZ_rotationBudget [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion setLeftMotorSpeed_setRightMotorSpeed
assert NoPid::Closed::Seqs::setLeftMotorSpeed_setRightMotorSpeed [T= NoPid::Closed::Target :[tau priority]: {tock}
-- Assertion setRightMotorSpeed_disableInterrupts
assert NoPid::Closed::Seqs::setRightMotorSpeed_disableInterrupts [T= NoPid::Closed::Target :[tau priority]: {tock}
--- END ASSERTION GROUP

--- BEGIN ASSERTION GROUP HoldsTT
-- Assertion NoPIDs
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::NoPIDs) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion init_time
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::init_time) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion init_disableInterrupts
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::init_disableInterrupts) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion disableInterrupts_loopTime
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::disableInterrupts_loopTime) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion disableInterrupts_enableInterrupts
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::disableInterrupts_enableInterrupts) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion enableInterrupts_angle
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::enableInterrupts_angle) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion angle_gyroX
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::angle_gyroX) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion gyroX_leftMotorVelocity
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::gyroX_leftMotorVelocity) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion gyroX_angleBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::gyroX_angleBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion leftMotorVelocity_rightMotorVelocity
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::leftMotorVelocity_rightMotorVelocity) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion rightMotorVelocity_speedBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::rightMotorVelocity_speedBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion gyroZ_rotationBudget
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::gyroZ_rotationBudget) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion setLeftMotorSpeed_setRightMotorSpeed
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::setLeftMotorSpeed_setRightMotorSpeed) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
-- Assertion setRightMotorSpeed_disableInterrupts
assert Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Seqs::setRightMotorSpeed_disableInterrupts) [T= Untitled_Group__0_file_properties::S::TTContext::TT(NoPid::Closed::Target)
--- END ASSERTION GROUP