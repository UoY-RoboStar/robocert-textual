--- generated by RoboCert
--- on 29-11-2021 15:22:47

include "../lib/robocert_defs.csp"
include "../../instantiations.csp"
include "../../defs/relation_toolkit_defs.csp"
include "../../defs/function_toolkit_defs.csp"
include "../../defs/core_defs.csp"
include "../../defs/set_toolkit_defs.csp"
include "../../defs/sequence_toolkit_defs.csp"
include "../../defs/file_PID_defs.csp"
include "../../defs/file_AngleCalculation_defs.csp"
include "../../defs/file_SegwayRP_defs.csp"
include "../../defs/file_Segway_defs.csp"
include "../../defs/file_RotationPID_defs.csp"
include "../../defs/file_AnglePID_defs.csp"
include "../../defs/file_BalanceSTM_defs.csp"
include "../../defs/file_SpeedPID_defs.csp"


--- BEGIN TARGET GROUP Untitled_Group__0_file_AnglePID
module Untitled_Group__0_file_AnglePID
exports
	module AS
	exports
		instance TTContext = model_shifting(Segway::sem__events)
		
		Universe = Segway::sem__events
		
		Open = Segway::D__
		
		Closed = Open(
			{- id -} 0,
			const_BalanceSTM_maxAngle,
			const_BalanceSTM_loopTime,
			const_BalanceSTM_startupDelay,
			const_BalanceSTM_speedUpdate,
			const_BalanceSTM_rotationUpdate,
			const_BalanceSTM_angleBudget,
			const_BalanceSTM_speedBudget,
			const_BalanceSTM_rotationBudget,
			const_BalanceSTM_motorBudget,
			const_AnglePID_P,
			const_AnglePID_D,
			const_SpeedPID_P,
			const_SpeedPID_I,
			const_SpeedPID_maxIntegral,
			const_RotationPID_D
		)
	endmodule
endmodule

--- END TARGET GROUP

--- BEGIN SEQUENCE GROUP AnglePID_P0_D1
module AnglePID_P0_D1
	module MsgSets
	exports
		Universe = Segway::sem__events
		MotorSpeed = union({ Segway::setLeftMotorSpeedCall.Bnd__0
		 | Bnd__0 <- core_real }, { Segway::setRightMotorSpeedCall.Bnd__0
		 | Bnd__0 <- core_real })
	endmodule
exports
	module Open(
		const_BalanceSTM_maxAngle,
		const_BalanceSTM_loopTime,
		const_BalanceSTM_startupDelay,
		const_BalanceSTM_speedUpdate,
		const_BalanceSTM_rotationUpdate,
		const_BalanceSTM_angleBudget,
		const_BalanceSTM_speedBudget,
		const_BalanceSTM_rotationBudget,
		const_BalanceSTM_motorBudget,
		const_SpeedPID_maxIntegral
	)
	exports
		Target = Untitled_Group__0_file_AnglePID::AS::Open(
			{- id -} 0,
			const_BalanceSTM_maxAngle,
			const_BalanceSTM_loopTime,
			const_BalanceSTM_startupDelay,
			const_BalanceSTM_speedUpdate,
			const_BalanceSTM_rotationUpdate,
			const_BalanceSTM_angleBudget,
			const_BalanceSTM_speedBudget,
			const_BalanceSTM_rotationBudget,
			const_BalanceSTM_motorBudget,
			{- const_AnglePID_P -} 0,
			{- const_AnglePID_D -} 1,
			{- const_SpeedPID_P -} 0,
			{- const_SpeedPID_I -} 0,
			const_SpeedPID_maxIntegral,
			{- const_RotationPID_D -} 0
		)
		
		module Memory
		exports
			module angle_outside_range
				sync = {|step0_body_step0_action_body_argument0|}
				
				proc(Bnd_step0_body_step0_action_body_argument0) = (
					step0_body_step0_action_body_argument0.set?Bnd_step0_body_step0_action_body_argument0 -> proc(Bnd_step0_body_step0_action_body_argument0)
				[]
					step0_body_step0_action_body_argument0.get!Bnd_step0_body_step0_action_body_argument0 -> proc(Bnd_step0_body_step0_action_body_argument0)
				)
			exports
				-- Get/set channels
				channel step0_body_step0_action_body_argument0 {- x -} : MemOp.core_real
				
				lift(P) = (
					P [| sync |] proc(0)
				) \ sync
			endmodule
		endmodule
		
		module Seqs
		exports
			Timed(OneStep) {
				angle_outside_range = Memory::angle_outside_range::lift(loop(Action(MsgSets::Universe, { Segway::angle.in.Bnd__x
				 | Bnd__x <- core_real })(Cold(Segway::angle.in?Bnd__x -> Memory::angle_outside_range::step0_body_step0_action_body_argument0.set!Bnd__x -> SKIP));
				Memory::angle_outside_range::step0_body_step0_action_body_argument0.get?Bnd__x -> {- alternative (HOT) -} (
					(
						((Bnd__x) < (-(const_BalanceSTM_maxAngle))) or ((Bnd__x) > (const_BalanceSTM_maxAngle)) & {- alternative (HOT) -} (
							(
								Action(diff(MsgSets::Universe, MsgSets::MotorSpeed), {| Segway::setLeftMotorSpeedCall.0 |})(Cold(Segway::setLeftMotorSpeedCall.0 -> SKIP))
							)[](
								Action(diff(MsgSets::Universe, MsgSets::MotorSpeed), {| Segway::setRightMotorSpeedCall.0 |})(Cold(Segway::setRightMotorSpeedCall.0 -> SKIP))
							)
						)
					)[](
						{- else -} not ((((Bnd__x) < (-(const_BalanceSTM_maxAngle))) or ((Bnd__x) > (const_BalanceSTM_maxAngle)))) & SKIP
					)
				)
				)
				
				; -- end of defined steps
				TCHAOS(MsgSets::Universe))
			}
		endmodule
	endmodule
	
	instance Closed = Open(
		const_BalanceSTM_maxAngle,
		const_BalanceSTM_loopTime,
		const_BalanceSTM_startupDelay,
		const_BalanceSTM_speedUpdate,
		const_BalanceSTM_rotationUpdate,
		const_BalanceSTM_angleBudget,
		const_BalanceSTM_speedBudget,
		const_BalanceSTM_rotationBudget,
		const_BalanceSTM_motorBudget,
		const_SpeedPID_maxIntegral
	)
endmodule

--- END SEQUENCE GROUP

--- BEGIN ASSERTION GROUP CoreAssertions
-- Assertion not_deterministic
assert not Untitled_Group__0_file_AnglePID::AS::Closed :[deterministic] :[tau priority]: {tock}
-- Assertion no_terminate
-- nontermination
assert STOP [T= Untitled_Group__0_file_AnglePID::AS::Closed\Events;r__ -> SKIP
-- Assertion deadlock_free
assert prioritise(Untitled_Group__0_file_AnglePID::AS::Closed[[tock<-tock,tock<-tock']], <diff(Events,{tock',tock}),{tock}>)\{tock} :[divergence free [FD]] :[tau priority]: {tock}
-- Assertion not_timelock_free
assert not RUN({tock}) ||| CHAOS(diff(Events, {|tock|})) [F= Untitled_Group__0_file_AnglePID::AS::Closed :[tau priority]: {tock}
--- END ASSERTION GROUP

--- BEGIN ASSERTION GROUP Holds
-- Assertion angle_outside_range_P0_D1
assert AnglePID_P0_D1::Closed::Seqs::angle_outside_range [T= AnglePID_P0_D1::Closed::Target :[tau priority]: {tock}
--- END ASSERTION GROUP

--- BEGIN ASSERTION GROUP HoldsTT
-- Assertion angle_outside_range_P0_D1
assert Untitled_Group__0_file_AnglePID::AS::TTContext::TT(AnglePID_P0_D1::Closed::Seqs::angle_outside_range) [T= Untitled_Group__0_file_AnglePID::AS::TTContext::TT(AnglePID_P0_D1::Closed::Target)
--- END ASSERTION GROUP