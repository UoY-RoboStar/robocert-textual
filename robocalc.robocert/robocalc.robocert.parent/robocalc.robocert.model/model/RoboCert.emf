@namespace(uri="http://robocert.robocalc/", prefix="robocert")
@genmodel
	( basePackage="robocalc.robocert.model"
	, modelPluginID="robocalc.robocert.model"
	, modelDirectory="/robocalc.robocert.model/src-gen"
	, editDirectory="/robocalc.robocert.model.edit/src-gen"
	, editorDirectory="/robocalc.robocert.model.editor/src-gen"
	, testsDirectory="/robocalc.robocert.model.tests/src-gen"
	)
package robocert;

import "platform:/resource/circus.robocalc.robochart/model/robochart.ecore";

/**
 * A RoboCert package.
 */
class Package {
	/**
	 * Any top-level CSP fragments in this package.
	 * 
	 * TODO: these will likely go away once we have a way of resolving files.
	 */
	val CSPFragment[] cspFragments;
	val Sequence[] sequences;
	val Assertion[] assertions;
}

/**
 * Class for things that have a name.
 */
abstract class Named {
	attr String name;
}

//
// CSP FRAGMENTS
//
/**
 * A fragment of CSP-M.
 */
class CSPFragment {
	/**
	 * The raw contents of the CSP fragment.
	 */
	attr String contents;
}

//
// SEQUENCES
//
/**
 * A sequence diagram.
 */
class Sequence extends Named {
	/**
	 * The target of the sequence diagram.
	 */
	val TargetSequenceActor target;
	/**
	 * The world of the sequence diagram.
	 */
	val WorldSequenceActor world;
	/**
	 * The steps contained within the sequence diagram.
	 * There is always at least one step (a final step, if the diagram is
	 * well-formed).
	 */
	val SequenceStep[1..*] steps;
}

/**
 * An actor in a sequence.
 *
 * There are two actors in a sequence: the 'target' of the sequence,
 * which is the system under test; and the 'world', which is the sum of
 * everything connected to the target.  They are bound to names used in the
 * diagram itself, but the target may also name an external RoboChart entity.
 */
abstract class SequenceActor extends Named {
}

/**
 * The world of a sequence.
 */
class WorldSequenceActor extends SequenceActor {
}

/**
 * The target of a sequence.
 */
abstract class TargetSequenceActor extends SequenceActor {
}

/**
 * A sequence target referring to a RoboChart module.
 */
class ModuleSequenceActor extends TargetSequenceActor {
	ref robochart.RCModule module;
}

/**
 * A single step in a sequence diagram.
 */
class SequenceStep {
	/**
	 * The specification of what can happen in the 'gap' before the step.
	 */
	val SequenceGap gap;

	/**
	 * The component inside the sequence step.
	 */
	val SequenceAction action;
}

/**
 * A specification of which internal communications can happen before a
 * sequence step, or at the end of a sequence diagram.
 */
abstract class SequenceGap {
}

/**
 * A sequence gap that permits no implicit communications.
 */
class StrictSequenceGap extends SequenceGap {
}

/**
 * A sequence gap that permits implicit communications.
 */
class LooseSequenceGap extends SequenceGap {
	/**
	 * The arrows forbidden by this gap.
	 * If there is no allow set, all arrows are allowed.
	 */
	val ArrowSet[?] allowed;

	/**
	 * The arrows forbidden by this gap.
	 * The empty set is considered to be 'no arrows are forbidden'.
	 */
	val ArrowSet forbidden;
}

/**
 * An action in a sequence diagram.
 */
abstract class SequenceAction {
}

/**
 * A communicating action in a sequence diagram.
 */
class ArrowSequenceAction extends SequenceAction {
	/**
	 * The body of the arrow.
	 */
	val SequenceArrow#parent body;
	/**
	 * The source of the communication.
	 */
	ref SequenceActor from;
	/**
	 * The target of the communication.
	 */
	ref SequenceActor to;
}

/**
 * A special action marking the end of a diagram.
 *
 * This exists mainly to allow a sequence gap at the end of the diagram.
 */
class FinalSequenceAction extends SequenceAction {
}

/**
 * A type of communication in a sequence diagram.
 */
abstract class SequenceArrow {
	/**
	 * The parent of the arrow.
	 */
	ref ArrowSequenceAction#body parent;
}

/**
 * An event arrow in a sequence diagram.
 */
class EventSequenceArrow extends SequenceArrow {
	/**
	 * The name of the event.
	 */
	ref robochart.Event event;
// TODO: parameter
}

/**
 * An operation arrow in a sequence diagram.
 */
class OperationSequenceArrow extends SequenceArrow {
	/**
	 * The name of the operation.
	 */
	ref robochart.OperationSig operation;
// TODO: check whether this should be Operation instead
// TODO: parameters
}

/**
 * A set of arrows, used in loose sequence gaps.
 */
class ArrowSet {
	// TODO: should this be something other than an ArrowSequenceAction?
	val ArrowSequenceAction[*] arrows;
}

//
// ASSERTIONS
//
/**
 * A RoboCert assertion, containing a named body with metadata.
 */
class Assertion extends Named {
	/**
	 * The body containing the part of the assertion that can vary.
	 */
	val AssertionBody#assertion body;
	/**
	 * The model under which this assertion should be checked if converted to (untimed) CSP.
	 * 
	 * TODO: is this always useful?
	 */
	attr CSPModel model = "Traces";
}

/**
 * An assertion body.
 */
abstract class AssertionBody {
	/**
	 * The parent assertion.
	 */
	ref Assertion#body assertion;
}

/**
 * A RoboCert sequence assertion body.
 */
abstract class SequenceAssertionBody extends AssertionBody {
	/**
	 * The sequence to which this assertion refers.
	 */
	ref Sequence sequence;
	/**
	 * Whether the assertion must fail to hold for the model to be validated.
	 */
	attr boolean isNegated;
}

/**
 * A sequence assertion body that requires that the behaviour described by the
 * sequence is (or is not) observable by the model.
 */
class ObservedSequenceAssertionBody extends SequenceAssertionBody {
}

/**
 * A sequence assertion body that requires that the behaviour described by the
 * sequence is (or is not) implemented by the model.
 */
class ImplementedSequenceAssertionBody extends SequenceAssertionBody {
}

/**
 * A CSP refinement model.
 */
enum CSPModel {
	Traces;
	Failures;
	FailuresDivergences;
}