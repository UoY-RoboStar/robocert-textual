@namespace(uri="http://robocert.robocalc/", prefix="robocert")
@genmodel
	( basePackage="robocalc.robocert.model"
	, modelPluginID="robocalc.robocert.model"
	, modelDirectory="/robocalc.robocert.model/src-gen"
	, editDirectory="/robocalc.robocert.model.edit/src-gen"
	, editorDirectory="/robocalc.robocert.model.editor/src-gen"
	, testsDirectory="/robocalc.robocert.model.tests/src-gen"
	)
package robocert;

import "platform:/resource/circus.robocalc.robochart/model/robochart.ecore";

/**
 * A RoboCert package.
 */
class RAPackage extends robochart.BasicPackage {
	/**
	 * Any top-level CSP fragments in this package.
	 * 
	 * TODO: these will likely go away once we have a way of resolving files.
	 */
	val CSPFragment[*] cspFragments;
	val Sequence[*] sequences;
	val NamedAssertion[*] assertions;
}

//
// CSP FRAGMENTS
//
/**
 * A fragment of CSP-M.
 */
class CSPFragment {
	/**
	 * The raw contents of the CSP fragment.
	 */
	attr String[1] contents;
}

//
// SEQUENCES
//

/**
 * A sequence of steps, forming part or all of a sequence diagram.
 */
class Subsequence {
	/**
	 * The steps contained within the subsequence.
	 * There is always at least one step.
	 */
	val SequenceStep[+]#parent steps;
}

/**
 * A sequence diagram.
 *
 * Well-formed sequence diagrams end with a final or infinite loop action.
 */
class Sequence extends robochart.NamedElement {
	/**
	 * The target actor of the sequence diagram.
	 */
	val Target[1]#sequence target;
	/**
	 * The world actor of the sequence diagram.
	 */
	val World[1]#sequence world;
	/**
	 * The top-level subsequence of the sequence diagram.
	 */
	val Subsequence[1] body;
}

/**
 * An actor in a sequence.
 *
 * There are two actors in a sequence: the 'target' of the sequence,
 * which is the system under test; and the 'world', which is the sum of
 * everything connected to the target.  They are bound to names used in the
 * diagram itself, but the target may also name an external RoboChart entity.
 */
abstract class Actor extends robochart.NamedElement {
}

/**
 * The world of a sequence.
 */
class World extends Actor {
	/**
	 * The sequence to which this actor is attached.
	 */
	ref Sequence[1]#world sequence;
}

/**
 * A target of a sequence.
 */
abstract class Target extends Actor {
	/**
	 * The sequence to which this actor is attached.
	 */
	ref Sequence[1]#target sequence;
	
	/**
	 * An initial instantiation to be applied to the target.
	 * Assertions may apply a further instantiation.
	 */
	val TargetInstantiation[1] instantiation;
}

/**
 * A sequence target referring to a RoboChart module.
 */
class RCModuleTarget extends Target {
	ref robochart.RCModule[1] module;
}

/**
 * Specifies a (partial) instantiation of a target.
 */
class TargetInstantiation {
	/**
	 * Any constant overrides.
	 */
	val ConstAssignment[*] constants;
}

/**
 * A constant override.
 */
class ConstAssignment {
	// NOTE: this would ideally be a Map.Entry, but I couldn't get
	// Xtend's serializer code generator to work with EMaps. 

	/**
	 * The constant being assigned.
	 */
	ref robochart.Variable[1] key;
	/**
	 * The expression containing the new value of the constant.
	 */
	val robochart.Expression[1] value;
}

/**
 * A single step in a subsequence.
 */
class SequenceStep {
	/**
	 * The parent subsequence of this step.
	 */
	ref Subsequence[1]#steps parent;

	/**
	 * The specification of what can happen in the 'gap' before the step.
	 */
	val SequenceGap[1] gap;

	/**
	 * The component inside the sequence step.
	 */
	val SequenceAction[1] action;
}

/**
 * A specification of which internal communications can happen before a
 * sequence step.
 *
 * Gaps may permit implicit communications between actions, according to the
 * allowed and forbidden message sets.  An empty allow set, for instance,
 * permits no communications. 
 */
class SequenceGap {
	/**
	 * The messages allowed by this gap.
	 */
	val GapMessageSet[1] allowed;

	/**
	 * The messages forbidden by this gap.
	 *
	 * It makes little sense to have a universal forbidden set, so we permit only an
	 * extensional set here.
	 */
	val ExtensionalGapMessageSet[1] forbidden;
}

/**
 * A set of gap message specs, used in loose sequence gaps.
 */
abstract class GapMessageSet {
}

/**
 * A message set that extensionally enumerates allowed or forbidden messages.
 */
class ExtensionalGapMessageSet extends GapMessageSet {
	/**
	 * The message specifications held by this message set.
	 */
	!ordered val GapMessageSpec[*]#parent messages;
}

/**
 * A message set that includes all messages.
 */
class UniverseGapMessageSet extends GapMessageSet {
}

/**
 * An action in a sequence diagram.
 */
abstract class SequenceAction {
}

/**
 * A communicating action in a sequence diagram.
 */
class ArrowAction extends SequenceAction {
	/**
	 * The body of the arrow.
	 */
	val ArrowMessageSpec[1]#parent body;
}

/**
 * An action containing one or more sequence elements in loop.
 *
 * A loop action has a name; this is used both in its semantic elaboration and
 * also as a target for any break actions.
 */
class LoopAction extends robochart.NamedElement, SequenceAction {
	// TODO: conditionals
	// TODO: break
	/**
	 * The body of the loop.
	 */
	val Subsequence[1] body;
}

/**
 * A special action marking the end of a diagram.
 *
 * This exists mainly to allow a sequence gap at the end of the diagram.
 */
class FinalAction extends SequenceAction {
}

//
// Message specs
//

/**
 * A specification of a message.
 */
abstract class MessageSpec {
	/**
	 * The topic of the message.
	 */
	val MessageTopic[1]#spec topic;
	/**
	 * The source of the message.
	 */
	ref Actor[1] from;
	/**
	 * The target of the message.
	 */
	ref Actor[1] to;
}

/**
 * A message specification corresponding to an arrow on a sequence diagram.
 */
class ArrowMessageSpec extends MessageSpec {
	/**
	 * The parent of the arrow.
	 */
	ref ArrowAction[1]#body parent;
}

/**
 * A message specification corresponding to an entry in a gap list.
 */
class GapMessageSpec extends MessageSpec {
	/**
	 * The parent gap message set.
	 */
	ref ExtensionalGapMessageSet[1]#messages parent;
}

//
// Message topics
//

/**
 * A message topic.
 */
abstract class MessageTopic {
	/**
	 * The parent message specification.
	 */
	ref MessageSpec[1]#topic spec;
}

/**
 * An event message topic.
 */
class EventTopic extends MessageTopic {
	/**
	 * The name of the event.
	 */
	ref robochart.Event[1] event;
// TODO: parameter
}

/**
 * An operation message topic.
 */
class OperationTopic extends MessageTopic {
	/**
	 * The name of the operation.
	 */
	ref robochart.OperationSig[1] operation;
// TODO: check whether this should be Operation instead
// TODO: parameters
}

//
// ASSERTIONS
//
/**
 * An assertion that has been given a name.
 */
class NamedAssertion extends robochart.NamedElement {
	/**
	 * The body containing the part of the assertion that can vary.
	 */
	val Assertion[1]#parent body;
}

/**
 * An assertion body.
 */
abstract class Assertion {
	/**
	 * The parent named assertion.
	 */
	ref NamedAssertion[1]#body parent;
}

/**
 * A RoboCert sequence assertion body.
 */
class SequenceAssertion extends Assertion {
	/**
	 * The sequence to which this assertion refers.
	 */
	ref Sequence[1] sequence;
	/**
	 * Whether the assertion must fail to hold for the model to be validated.
	 */
	attr boolean[1] isNegated;
	/**
	 * The type of assertion.
	 */
	attr SequenceAssertionType[1] type;
	/**
	 * Assertion-level instantiation applied to this sequence's target.
	 */
	val TargetInstantiation[1] instantiation;
	/**
	 * The model under which this assertion should be checked under CSP.
	 * 
	 * TODO(@MattWindsor91): timed models, work out what to do with this actually.
	 */
	attr CSPModel[1] model = "TICK_TOCK";	
}

enum SequenceAssertionType {
	/**
	 * The sequence holds over the target
	 * (all behaviours of the target are included in the sequence).
	 */
	HOLDS;
	/**
	 * The sequence is observed on the target
	 * (all behaviours of the sequence are observable on the target).
	 */
	IS_OBSERVED;
}

/**
 * A CSP refinement model.
 */
enum CSPModel {
	/**
	 * The timed tick-tock CSP model.
	 */
	TICK_TOCK;
	/**
	 * Traces refinement.
	 */
	TRACES;
}