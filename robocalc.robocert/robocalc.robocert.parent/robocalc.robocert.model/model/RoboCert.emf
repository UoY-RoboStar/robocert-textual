/**
 * Emfatic projection of the RoboCert metamodel.
 *
 * To use this metamodel, translate it into Ecore using the Emfatic toolchain,
 * then use the MWE2 to generate the support code.
 *
 * Authors:
 * - Matt Windsor (@MattWindsor91): initial model
 */
@namespace(uri="http://robocert.robocalc/", prefix="robocert")
@genmodel
	( basePackage="robocalc.robocert.model"
	, modelPluginID="robocalc.robocert.model"
	, modelDirectory="/robocalc.robocert.model/src-gen"
	, editDirectory="/robocalc.robocert.model.edit/src-gen"
	, editorDirectory="/robocalc.robocert.model.editor/src-gen"
	, testsDirectory="/robocalc.robocert.model.tests/src-gen"
	)
package robocert;

import "platform:/resource/circus.robocalc.robochart/model/robochart.ecore";

/* How to read this model:
 *
 * - With the exception of utility classes, the metamodel is structured based
 *   on how things are (or should be) structured in the RoboCert reference
 *   manual, as well as in the Sirius diagrams.
 * - The Sirius diagrams in `representations.aird` are probably a more
 *   approachable introduction to what is going on here.
 */


///////////////////////////////////////////////////////////////////////////////
// UTILITIES
///////////////////////////////////////////////////////////////////////////////

@genmodel(documentation="An element that might be named, but might not be.

This is usually useful for elements where the name adds some syntactic
complexity but enables cross-reference, and so we want to offer a possible
unnamed variant.")
abstract class OptionallyNamedElement {
	@genmodel(documentation="The name (can be null).")
	attr String[0..1] name;
}


///////////////////////////////////////////////////////////////////////////////
// CORE LANGUAGE
///////////////////////////////////////////////////////////////////////////////

@genmodel(documentation="A RoboCert package.")
class CertPackage extends robochart.BasicPackage {
	@genmodel(documentation="Any groups in this package.

Groups form an ordered list because they can lexically depend on things
defined in previous groups.")
	ordered val Group[*]#parent groups;
}

@genmodel(documentation="A group in a RoboCert package.")
abstract class Group extends OptionallyNamedElement {
	@genmodel(documentation="The parent package.")
	ref CertPackage[1]#groups parent;
}

@genmodel(documentation="A group containing specifications.")
class SpecificationGroup extends Group {
	@genmodel(documentation="The target of this group.")
	val Target[1]#group target;

	@genmodel(documentation="The constant assignments in effect on this specification group.")
	val ConstAssignment[*] assignments;

	@genmodel(documentation="Any message sets named on the sequence group.")
	!ordered val NamedMessageSet[*]#group messageSets;
	
	@genmodel(documentation="The actors available in this sequence group.")
	!ordered val Actor[0..*]#group actors;

	@genmodel(documentation="The interactions inside this sequence group.")
	ordered val Interaction[*]#group interactions;
}


//
// TARGETS
//

@genmodel(documentation="A specification target.

Targets combine several things: a RoboChart element;
a process representing the element from a refinement perspective;
information about the upstream ('context') elements connected to this target;
and information about the downstream elements connected to it.")
abstract class Target {
	@genmodel(documentation="The specification group to which this target belongs.")
	ref SpecificationGroup[1]#target group;
	
	//
	// Derived properties
	//

	@genmodel(documentation="Lowest common denominator for the targeted element.")
	derived volatile transient readonly ref robochart.NamedElement[1] element;	
}

//
// Component targets
//

@genmodel(documentation="A target referring to the behaviour of a component.")
abstract class ComponentTarget extends Target {
}

@genmodel(documentation="A target referring to a RoboChart module.

Such a target has the robotic platform as its context and its element is the module.")
class ModuleTarget extends ComponentTarget {
	@genmodel(documentation="The module referred to by this target.")
	ref robochart.RCModule[1] module;
}

@genmodel(documentation="A target referring to a RoboChart controller.")
class ControllerTarget extends ComponentTarget {
	@genmodel(documentation="The controller referred to by this target.")
	ref robochart.ControllerDef[1] controller;
}

@genmodel(documentation="A target referring to a RoboChart state machine.")
class StateMachineTarget extends ComponentTarget {
	@genmodel(documentation="The state machine referred to by this target.")
	ref robochart.StateMachineDef[1] stateMachine;
}

@genmodel(documentation="A target referring to a RoboChart operation.")
class OperationTarget extends ComponentTarget {
	@genmodel(documentation="The operation referred to by this target.")
	ref robochart.OperationDef[1] operation;
}

//
// Collection targets
//

@genmodel(documentation="A target that contains a collection of elements.")
abstract class CollectionTarget extends Target {
	@genmodel(documentation="Any components accessible from this target.")
	derived volatile transient readonly ref robochart.ConnectionNode[*] components;	
}

@genmodel(documentation="A target referring to the contents of a RoboChart module.")
class InModuleTarget extends CollectionTarget {
	@genmodel(documentation="The module referred to by this target.")
	ref robochart.RCModule[1] module;
}

@genmodel(documentation="A target referring to the contents of a RoboChart controller.")
class InControllerTarget extends CollectionTarget {
	@genmodel(documentation="The controller referred to by this target.")
	ref robochart.ControllerDef[1] controller;
}

@genmodel(documentation="Assigns a value to one or more constants.")
class ConstAssignment {
	@genmodel(documentation="The constant(s) being assigned.")
	ref robochart.Variable[+] constants;
	
	@genmodel(documentation="The expression containing the new value of the constant(s).")
	val robochart.Expression[1] value;
	
	@genmodel(documentation="Checks whether this assignment maps the given constant.")
	derived readonly transient volatile op boolean[1] hasConstant(robochart.Variable constant);
}

//
// ASSERTIONS
//

@genmodel(documentation="An assertion group.")
class AssertionGroup extends Group {
	val Assertion[*]#group assertions;
}

@genmodel(documentation="An assertion.")
class Assertion extends robochart.NamedElement {
	@genmodel(documentation="The group to which this assertion belongs.")
	ref AssertionGroup[1]#assertions group;

	@genmodel(documentation="The root property of the assertion.")
	val Property[1] property;
}

@genmodel(documentation="A property in an assertion.")
abstract class Property {
	// TODO(@MattWindsor91): we may eventually want conjunctions/disjunctions,
	// in which case I might need to re-evaluate whether negated belongs here.

	@genmodel(documentation="Whether the assertion must fail to hold for the model to be validated.")
	attr boolean[1] negated;
}


//
// Core properties
//

@genmodel(documentation="A core property on the target of a specification group.")
class CoreProperty extends Property {
	@genmodel(documentation="The specification group whose target is being investigated.")
	ref SpecificationGroup[1] group;

	@genmodel(documentation="The specific type of property being investigated.")
	attr CorePropertyType[1] type;
}

@genmodel(documentation="Enumeration of core properties.")
enum CorePropertyType {
	@genmodel(documentation="Timelock freedom.")
	TIMELOCK_FREE;
	@genmodel(documentation="Timed deadlock freedom.")
	DEADLOCK_FREE;
	@genmodel(documentation="Determinism.")
	DETERMINISM;
	@genmodel(documentation="Termination.")
	TERMINATION;
	// TODO(@MattWindsor91): clock initialisation
}

// TODO(@MattWindsor91): binary types


//
// OTHER
//


//
// Value specifications
//

@genmodel(documentation="A value specification.")
abstract class ValueSpecification {
}

@genmodel(documentation="Value specified by an expression.")
class ExpressionValueSpecification extends ValueSpecification {
	@genmodel(documentation="The expression in question.")
	val robochart.Expression[1] expr;
}

@genmodel(documentation="Value left unconstrained (except by type), and possibly bound.")
class WildcardValueSpecification extends ValueSpecification {
	@genmodel(documentation="An optional variable to receive the value.")
	ref robochart.Variable[0..1] destination;
}


//
// Modalities
//

@genmodel(documentation="Temperature modality.")
enum Temperature {
	@genmodel(documentation="Cold temperature; no obligation on model to ensure progress.")
	COLD;
	@genmodel(documentation="Hot temperature; obligation on model to ensure progress.")
	HOT;	
}


///////////////////////////////////////////////////////////////////////////////
// SEQUENCES
///////////////////////////////////////////////////////////////////////////////

@genmodel(documentation="An interaction spawning a sequence diagram.")
class Interaction extends robochart.NamedElement {
	@genmodel(documentation="The parent group.")
	ref SpecificationGroup[1]#interactions group;

	@genmodel(documentation="The variables available for receiving arguments.")
	val robochart.VariableList[0..1] variables;

	@genmodel(documentation="The set of group actors forming lifelines/gates in this diagram.

The order determines that in which lifelines are shown in the graphical notation.")
	ordered ref Actor[2..*] actors;

	@genmodel(documentation="The fragments of the sequence diagram.")
	ordered val InteractionFragment[+] fragments;
}


//
// FRAGMENTS
//

// NOTE: When adding new fragments, remember to extend the generators.

@genmodel(documentation="A single interaction fragment in a subsequence.")
abstract class InteractionFragment {
}


//
// Non-combined fragments
//

@genmodel(documentation="An interaction fragment referring to a particular occurrence in time.")
class OccurrenceFragment extends InteractionFragment {
	@genmodel(documentation="The occurrence proper.")
	val Occurrence[1]#fragment occurrence;
	
	@genmodel(documentation="The temperature of this occurrence.")
	attr Temperature[1] temperature;
}


//
// Combined fragments
//

@genmodel(documentation="Abstract class for combined fragments.")
abstract class CombinedFragment extends InteractionFragment, OptionallyNamedElement {
	// TODO(@MattWindsor91): derived property for all subsequences?
}


//
// Block fragments
//

@genmodel(documentation="Combined fragment that contains exactly one body.")
abstract class BlockFragment extends CombinedFragment {
	@genmodel(documentation="The body of the block.")
	val InteractionOperand[1] body;
}

@genmodel(documentation="An optional fragment.")
class OptFragment extends BlockFragment {
}

@genmodel(documentation="Fragment imposing a duration constraint on a block.")
class DurationFragment extends BlockFragment {	
	@genmodel(documentation="The lifeline to which we are attaching the constraint.")
	ref Actor[1] actor;

	@genmodel(documentation="The bound on the number of time units that can occur in this block.")
	val DiscreteBound[1] bound;
}

@genmodel(documentation="An interaction fragment blocking the diagram until any occurrence happens on the block.

This is an extension to UML.")
class UntilFragment extends BlockFragment {
	@genmodel(documentation="The messages that may occur while waiting for 'body'.")
	val MessageSet[1] intraMessages;
}

@genmodel(documentation="A fragment containing one or more sequence elements in loop.")
class LoopFragment extends BlockFragment {
	@genmodel(documentation="The loop bound, if there is one.  Evaluated once only.")
	val DiscreteBound[?] bound;

	// TODO: conditionals
}


//
// Discrete bounds
//

@genmodel(documentation="A possibly open-ended bound on a discrete quantity.")
class DiscreteBound {
	@genmodel(documentation="The lower bound, which defaults to the upper bound.")
 	val robochart.Expression[?] lower;
 
 	@genmodel(documentation="The upper bound, which defaults to infinity.")
 	val robochart.Expression[?] upper;
}


//
// Branch fragments
//

@genmodel(documentation="Abstract fragment containing two or more branches.")
abstract class BranchFragment extends CombinedFragment {
	@genmodel(documentation="The branches available in this fragment.")
	val InteractionOperand[2..*]#fragment branches;
}

@genmodel(documentation="A (provisional) alternative choice fragment.")
class AltFragment extends BranchFragment {
}

@genmodel(documentation="A mandatory alternative choice fragment.

The concept from this comes from STAIRS (Haugen et al., 2003).")
class XAltFragment extends BranchFragment {
}

@genmodel(documentation="An interleaving composition fragment.")
class ParFragment extends BranchFragment {
}

@genmodel(documentation="A potentially-guarded subsequence used in a BranchFragment.")
class InteractionOperand {
	@genmodel(documentation="The guard for this operand.")
	val Guard[1]#parent guard;
	
	@genmodel(documentation="The fragments in this operand.")
	ordered val InteractionFragment[*] fragments;
}

@genmodel(documentation="A condition placed on an InteractionOperand.")
abstract class Guard {
	@genmodel(documentation="The parent branch of this guard.")
	ref InteractionOperand[1]#guard parent;
}

@genmodel(documentation="A guard that is always true.")
class EmptyGuard extends Guard {
}

@genmodel(documentation="A guard that is dependent on the truth value of an expression.")
class ExprGuard extends Guard {
	val robochart.Expression[1] expr;
}

@genmodel(documentation="A guard that is true if all other guards in the BranchFragment are false.

It is ill-formed to have multiple ElseGuards in a step, or to have both an
ElseGuard and an EmptyGuard in a step.")
class ElseGuard extends Guard {
}


//
// OCCURRENCES
//

@genmodel(documentation="An occurrence in a sequence.")
abstract class Occurrence {
	@genmodel(documentation="The fragment containing this action.")
	ref OccurrenceFragment[1]#occurrence fragment;
}

@genmodel(documentation="An occurrence that represents a message communication.

Unlike UML, there is only one occurrence for both ends of the message.")
class MessageOccurrence extends Occurrence {
	@genmodel(documentation="The message itself.")
	val Message[1] message;
}

@genmodel(documentation="Base class of occurrences on exactly one lifeline.")
abstract class LifelineOccurrence extends Occurrence {
	@genmodel(documentation="The actor on which this occurrence is occurring.")
	ref Actor[1] actor;	
	// TODO(@MattWindsor91): maybe make this [0..1] and have a wfc that
	// restricts the 0 condition to when we're at the top of an Until
	// fragment.  This used to be the case in previous iterations of the
	// metamodel, but I've rowed back on it to simplify things for v0.1.
}

@genmodel(documentation="Represents a deadlock event in a sequence.")
class DeadlockOccurrence extends LifelineOccurrence {
}

@genmodel(documentation="Represents a wait for some amount of time units.")
class WaitOccurrence extends LifelineOccurrence {
	@genmodel(documentation="The number of units to wait.")
	val robochart.Expression[1] units;
	
	// TODO(@MattWindsor91): nondeterministic waits
}


//
// MESSAGES
//

@genmodel(documentation="A specification of a message.")
class Message {
	@genmodel(documentation="The topic of the message.")
	val MessageTopic[1]#message topic;
	@genmodel(documentation="The argument list for the message.")
	val ValueSpecification[*] arguments;
	@genmodel(documentation="The source of the message.")
	ref Actor[1] from;
	@genmodel(documentation="The destination of the message.")
	ref Actor[1] to;
}


//
// Message topics
//

@genmodel(documentation="A message topic.")
abstract class MessageTopic {
	@genmodel(documentation="The parent message specification.")
	ref Message[1]#topic message;
	
	//
	// Derived properties
	//
	
	@genmodel(documentation="The types of all parameters accepted by this topic.

For event topics, there is at most one pseudo-parameter: the type of the event.")
	derived transient readonly volatile ref robochart.Type[*] paramTypes;	
}

@genmodel(documentation="An event message topic.")
class EventTopic extends MessageTopic {
	@genmodel(documentation="The name of the event.")
	ref robochart.Event[1] event;
}

@genmodel(documentation="An operation message topic.")
class OperationTopic extends MessageTopic {
	@genmodel(documentation="The name of the operation.")
	ref robochart.OperationSig[1] operation;
}


//
// Message sets
//

@genmodel(documentation="A defined and named message set.")
class NamedMessageSet extends robochart.NamedElement {
	@genmodel(documentation="The sequence group on which this message set is defined.")
	ref SpecificationGroup#messageSets group;

	@genmodel(documentation="The inner message set.")
	val MessageSet[1] set;
}

@genmodel(documentation="A set of message specifications.")
abstract class MessageSet {
	@genmodel(documentation="Whether this message set has messages.

For instance, universal message sets are always active, but extensional ones may be if no messages are held,
reference sets are active iff their referred-to sets are,
and binary message sets depend on the operator and operands.

This is an optimistic estimate, and may falsely report activity when there isn't any.")
	derived volatile readonly transient attr boolean active;
	
	@genmodel(documentation="Whether this message set contains every message.

Universal message sets are always universal,
reference sets are active iff their referred-to sets are,
and binary message sets depend on the operator and operands.

This is a pessimistic estimate, and may falsely deny universality when there is some.")
	derived volatile readonly transient attr boolean universal;	
}

@genmodel(documentation="A message set that is a reference to a previously named message set.")
class RefMessageSet extends MessageSet {
	@genmodel(documentation="The message set being named.")
	ref NamedMessageSet[1] set;
}

@genmodel(documentation="A message set that extensionally enumerates messages.")
class ExtensionalMessageSet extends MessageSet {
	@genmodel(documentation="The message specifications held by this message set.")
	!ordered val Message[*]#set messages;
}

@genmodel(documentation="A message set that includes all messages.")
class UniverseMessageSet extends MessageSet {
}

@genmodel(documentation="A binary set operation over two message sets.")
class BinaryMessageSet extends MessageSet {
	// NOTE(@MattWindsor91): I've tried making this and other classes have
	// a generic binary superclass, but ran into problems with Xtext being
	// unable to deal with the resulting type erasure.
	
	@genmodel(documentation="The left-hand side.")
	val MessageSet[1] lhs;
	
	@genmodel(documentation="The right-hand side.")
	val MessageSet[1] rhs;
	
	@genmodel(documentation="The operator.")
	attr BinarySetOperator[1] operator;
}

@genmodel(documentation="A binary set operator.")
enum BinarySetOperator {
	@genmodel(documentation="Set union ('or').")
	UNION;
	@genmodel(documentation="Set intersection ('and').")
	INTERSECTION;
	@genmodel(documentation="Set difference ('except').")
	DIFFERENCE;
}

//
// ACTORS
//

@genmodel(documentation="An actor in a sequence.

Actors have names, for use in lifelines and ExplicitEdges.")
abstract class Actor extends robochart.NamedElement {
	// NOTE(@MattWindsor91): it would have been more idiomatic to have Actors
	// belong to Sequences rather than SpecificationGroups, but MessageSets would
	// need either a complex setup to pick up Actors _or_ would need defining
	// within Sequences.

	@genmodel(documentation="The sequence group to which these actors belong.")
	ref SpecificationGroup[1]#actors group;
}

@genmodel(documentation="Actor that stands for the current target.")
class TargetActor extends Actor {
}

@genmodel(documentation="Actor that stands for the environment of the current target.")
class World extends Actor {
}

@genmodel(documentation="Actor that references a component of the target.")
class ComponentActor extends Actor {
	@genmodel(documentation="Component being referenced.

It is ill-formed for this node to not be a component of the target,
and also ill-formed for the same component to form multiple actors.")
	ref robochart.ConnectionNode[1] node;
}


//
// SEQUENCE PROPERTIES
//

@genmodel(documentation="A property of a sequence.")
class SequenceProperty extends Property {
	@genmodel(documentation="Interaction to which this assertion refers.")
	ref Interaction[1] interaction;

	@genmodel(documentation="Type of assertion.")
	attr SequencePropertyType[1] type;
	
	@genmodel(documentation="Semantic model under which this assertion should be checked.")
	attr SemanticModel[1] model = "TIMED";	
}

@genmodel(documentation="Type of sequence assertion.")
enum SequencePropertyType {
	@genmodel(documentation="All behaviours of the target are included in the sequence.")
	HOLDS;

	@genmodel(documentation="All behaviours of the sequence are observable on the target.")
	IS_OBSERVED;
}


@genmodel(documentation="A semantic model for verification.")
enum SemanticModel {
	@genmodel(documentation="Timed, liveness-aware model.

Under this model, both permitted and refused behaviour in implementations must conform to specifications.
This extends to timing: deadlines enforced by the target must correspond to deadlines in the specification, for instance.")
	TIMED;
	
	@genmodel(documentation="Traces model.

This model checks that all traces observable on implementations are allowed by specifications.
It doesn't investigate liveness properties:
as a result, the sequence notion of temperature is irrelevant, as is the distinction between alt and xalt.")
	TRACES;
}


///////////////////////////////////////////////////////////////////////////////
// LOW-LEVEL LANGUAGES
///////////////////////////////////////////////////////////////////////////////

//
// CSP
//

@genmodel(documentation="A CSP fragment in group position.")
class CSPGroup extends Group {
	attr String[1] csp;
}

@genmodel(documentation="A CSP fragment in property position.")
class CSPProperty extends Property {
	attr String[1] csp;
}

