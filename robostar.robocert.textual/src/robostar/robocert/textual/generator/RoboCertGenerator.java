/*
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/*
 * generated by Xtext 2.25.0
 */
package robostar.robocert.textual.generator;

import java.util.function.Consumer;

import org.eclipse.core.runtime.ISafeRunnable;
import org.eclipse.core.runtime.SafeRunner;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.core.runtime.Platform;

/**
 * Generates code from model files on save.
 * <p>
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
public class RoboCertGenerator extends AbstractGenerator {
	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Workaround for resolution errors.
		EcoreUtil.resolveAll(input.getResourceSet());

		forEachGenerator(gen -> gen.beforeGenerate(input, fsa, context), context);
	}

	@Override
	public void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Workaround for resolution errors.
		EcoreUtil.resolveAll(input.getResourceSet());

		forEachGenerator(gen -> SafeRunner.run(new LoggingRunner() {
			@Override
			public void run() throws Exception {
				gen.doGenerate(input, fsa, context);
			}
		}), context);
	}

	@Override
	public void afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		forEachGenerator(gen -> gen.afterGenerate(input, fsa, context), context);
	}

	/**
	 * Applies the consumer to each registered generator, returning early on cancellation.
	 * @param f function to apply to each generator.
	 * @param context context used to check cancellation.
	 */
	private void forEachGenerator(Consumer<IGenerator2> f, IGeneratorContext context) {
		final var config = Platform.getExtensionRegistry().getConfigurationElementsFor(GEN_ID);
		for (var e : config) {
			if (context.getCancelIndicator().isCanceled())
				return;
			SafeRunner.run(new LoggingRunner(){
				@Override
				public void run() throws Exception {
					final var o = e.createExecutableExtension("class");
					if (o instanceof IGenerator2 g) {
						f.accept(g);
					}
				}
			});
		}
	}

	/**
	 * The generator ID, used for pulling in generator plugins.
	 */
	public final static String GEN_ID = "robocert.generator";

	private abstract static class LoggingRunner implements ISafeRunnable {
		public void handleException(Throwable e) {
			// TODO(@MattWindsor91): is there a log this should be sent to?
			System.err.println("ERROR: RoboCert generator threw an exception.");
			System.err.println("Please file this as a bug at github.com/UoY-RoboStar/robocert-textual.");
			System.err.println("Details:");
			e.printStackTrace();
		}
	}
}
