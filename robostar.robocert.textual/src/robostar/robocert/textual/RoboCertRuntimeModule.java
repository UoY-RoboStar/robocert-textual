/*
 * Copyright (c) 2022 University of York and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/*
 * generated by Xtext 2.25.0
 */
package robostar.robocert.textual;

import circus.robocalc.robochart.textual.scoping.RoboChartImportURIGlobalScopeProvider;
import circus.robocalc.robochart.textual.scoping.RoboChartImportedNamespaceAwareLocalScopeProvider;
import com.google.inject.Binder;
import com.google.inject.TypeLiteral;

import org.eclipse.xtext.generator.IOutputConfigurationProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import robostar.robocert.textual.generator.RoboCertOutputConfigurationProvider;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import circus.robocalc.robochart.textual.RoboChartQualifiedNameConverter;
import circus.robocalc.robochart.impl.RoboChartFactoryImplCustom;
import circus.robocalc.robochart.RoboChartFactory;
import robostar.robocert.textual.generator.intf.seq.ContextualGenerator;
import robostar.robocert.textual.generator.intf.seq.fragment.BlockFragmentGenerator;
import robostar.robocert.textual.generator.tockcsp.seq.InteractionOperandGenerator;
import robostar.robocert.textual.generator.tockcsp.seq.fragment.BlockFragmentGeneratorImpl;
import robostar.robocert.InteractionOperand;
import robostar.robocert.RoboCertFactory;
import robostar.robocert.textual.generator.intf.seq.OccurrenceGenerator;
import robostar.robocert.textual.generator.tockcsp.seq.occurrence.OccurrenceGeneratorImpl;
import robostar.robocert.textual.generator.intf.seq.SubsequenceGenerator;
import robostar.robocert.textual.generator.intf.seq.InteractionFragmentGenerator;

import org.eclipse.xtext.conversion.IValueConverterService;
import robostar.robocert.textual.generator.tockcsp.seq.SubsequenceGeneratorImpl;
import robostar.robocert.textual.generator.tockcsp.seq.fragment.InteractionFragmentGeneratorImpl;
import robostar.robocert.impl.RoboCertFactoryImpl;
import robostar.robocert.util.resolve.EventResolver;
import robostar.robocert.util.resolve.EventResolverImpl;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
@SuppressWarnings("unused")
public class RoboCertRuntimeModule extends AbstractRoboCertRuntimeModule {
	@Override
	public void configure(Binder binder) {
		binder.bind(new TypeLiteral<EventResolver>() {}).to(EventResolverImpl.class); 
		super.configure(binder);
	}
	
	public Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
		return RoboCertOutputConfigurationProvider.class;
	}

	public Class<? extends OccurrenceGenerator> bindOccurrenceGenerator() {
		return OccurrenceGeneratorImpl.class;
	}

	public Class<? extends SubsequenceGenerator> bindSubsequenceGenerator() {
		return SubsequenceGeneratorImpl.class;
	}

	public Class<? extends InteractionFragmentGenerator> bindInteractionFragmentGenerator() {
		return InteractionFragmentGeneratorImpl.class;
	}

	public Class<? extends ContextualGenerator<InteractionOperand>> bindInteractionOperandGenerator() {
		return InteractionOperandGenerator.class;
	}

	// public Class<? extends EventResolver> bindEventResolver() {
	// return EventResolverImpl.class;
	// }

	public Class<? extends BlockFragmentGenerator> bindBlockFragmentGenerator() {
		return BlockFragmentGeneratorImpl.class;
	}

	/**
	 * Binds the RoboChart name converter (so that qualified names are
	 * '::'-delimited).
	 */
	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
		return RoboChartQualifiedNameConverter.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return RoboCertValueConverterService.class;
	}

	//
	// These next two serve to put the core RoboChart toolkits into the global
	// scope.
	//

	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return RoboChartImportURIGlobalScopeProvider.class;
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
				.annotatedWith(com.google.inject.name.Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
				.to(RoboChartImportedNamespaceAwareLocalScopeProvider.class);
	}

	/**
	 * Binds the RoboCert factory.
	 */
	public Class<? extends RoboCertFactory> bindRoboCertFactory() {
		// TODO(@MattWindsor91): is this the right way to do this?
		return RoboCertFactoryImpl.class;
	}

	/**
	 * Binds the RoboChart custom factory.
	 */
	public Class<? extends RoboChartFactory> bindRoboChartFactory() {
		return RoboChartFactoryImplCustom.class;
	}
}
